import { ConnectDragPreview } from 'react-dnd';
import { ConnectDragSource } from 'react-dnd';
import { ConnectDropTarget } from 'react-dnd';
import { CSSProperties } from 'react';
import { DefineIconParameters } from 'froala-editor';
import { DraggableProvidedDragHandleProps } from 'react-beautiful-dnd';
import { DropResult } from 'react-beautiful-dnd';
import { ForwardRefExoticComponent } from 'react';
import { FroalaOptions } from 'froala-editor';
import { HTMLAttributeAnchorTarget } from 'react';
import { JSX as JSX_2 } from 'react/jsx-runtime';
import { KeyboardEvent as KeyboardEvent_2 } from 'react';
import { MouseEvent as MouseEvent_2 } from 'react';
import { MouseEventHandler } from 'react';
import { MutableRefObject } from 'react';
import { default as React_2 } from 'react';
import { ReactCodeMirrorProps } from '@uiw/react-codemirror';
import { ReactCodeMirrorRef } from '@uiw/react-codemirror';
import { ReactNode } from 'react';
import { ReactPortal } from 'react';
import { Ref } from 'react';
import { RefAttributes } from 'react';
import { RefObject } from 'react';
import { RegisterCommandParameters } from 'froala-editor';

export declare interface ActionCell extends TableCell {
    /**
     * Actions that should be available in the action cell.
     */
    actions: TableAction[];
    /**
     * Maximun number of visible actions.
     */
    maxVisibleRowActions?: number;
    /**
     * Handler to execute the action.
     */
    onInvokeAction: (action: TableAction) => Promise<void>;
}

export declare const ActionMenu: React_2.ForwardRefExoticComponent<ActionMenuProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Represents a divider component for an action menu.
 */
export declare const ActionMenuDivider: React_2.ForwardRefExoticComponent<ActionMenuDividerProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Represents the properties for the ActionMenuDivider component.
 */
export declare interface ActionMenuDividerProps {
    /**
     * Orientation of ActionMenuDivider.
     */
    readonly orientation?: DividerOrientation;
}

export declare const ActionMenuHeadline: React_2.ForwardRefExoticComponent<ActionMenuHeadlineProps & React_2.RefAttributes<HTMLDivElement>>;

declare interface ActionMenuHeadlineProps {
    readonly label: string;
}

export declare interface ActionMenuProps extends Omit<VerticalMenuProps, 'pinnedItem'> {
}

export declare const ActionTile: React_2.ForwardRefExoticComponent<ActionTileProps & React_2.RefAttributes<HTMLButtonElement>>;

export declare interface ActionTileProps extends UITestProps {
    /**
     * Text used as a label of the action tile.
     */
    readonly label: string;
    /**
     * Displayed icon name.
     */
    readonly icon: IconName;
    /**
     * Icon set name
     */
    readonly iconSet?: IconSet;
    /**
     * Tab index.
     */
    readonly tabIndex?: number;
    /**
     * Button type.
     */
    readonly buttonType?: ButtonType;
    /**
     * Action tile state.
     */
    readonly state?: ActionTileState;
    /**
     * Action tile size.
     */
    readonly size?: ActionTileSize;
    /**
     * Action tile type.
     */
    readonly type?: ActionTileType;
    /**
     * Tooltip.
     */
    readonly tooltip?: string;
    /**
     * Callback called on the action tile click.
     */
    readonly onClick?: () => void;
}

export declare enum ActionTileSize {
    XSmall = "XSmall",
    Small = "Small",
    Large = "Large"
}

export declare enum ActionTileState {
    Default = "Default",
    Disabled = "Disabled",
    Selected = "Selected",
    InProgress = "InProgress"
}

export declare enum ActionTileType {
    Default = "Default",
    Dashboard = "Dashboard"
}

declare type AnchorButtonProps = Pick<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'title' | 'href' | 'target' | 'onClick'>;

export declare const ApplicationTile: React_2.ForwardRefExoticComponent<ApplicationTileProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ApplicationTileProps extends UITestProps {
    /**
     * Label (required).
     */
    readonly label: string;
    /**
     * Icon name (required).
     */
    readonly iconName: IconName;
    /**
     * State of the tile. Defaults to 'Default'.
     */
    readonly state?: ApplicationTileState;
    /**
     * Tooltip.
     */
    readonly tooltip?: string;
    readonly tooltipPlacement?: TooltipPlacement;
    /**
     * Find out if it's favourite tile
     */
    readonly favouriteTile?: {
        withStar?: boolean;
        starTooltip?: string;
        starTooltipPlacement?: TooltipPlacement;
    };
    /**
     * Allows consumer to bind an `onClick` event handler.
     */
    readonly onClick?: (event: MouseEvent_2<HTMLElement>) => void;
    /**
     * Link to redirect.
     */
    readonly link?: string;
}

export declare enum ApplicationTileState {
    Default = "Default",
    Disabled = "Disabled",
    Activated = "Activated"
}

/**
 * Action button props.
 */
export declare interface AssetTileActionProps extends Omit<ButtonProps, 'type' | 'size'> {
}

declare interface AssetTileBaseProps extends Omit<BaseTileBaseProps, 'type'> {
}

/**
 * Component for displaying AssetsTile Preview type.
 */
export declare const AssetTilePreview: React_2.ForwardRefExoticComponent<AssetTilePreviewProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Selected props from AssetTileProps for Preview tile.
 */
export declare interface AssetTilePreviewProps extends AssetTileBaseProps, Pick<AssetTileProps, 'onClick' | 'isSelected' | 'onChange' | 'isCheckboxVisible' | 'actions' | 'dataTestId'> {
}

declare interface AssetTileProps extends AssetTileBaseProps, UITestProps {
    /**
     * Specifies the AssetTile type: Skeleton, Preview, Selectable (required).
     */
    readonly type: AssetTileType;
    /**
     * Function called when checkbox is clicked.
     */
    readonly onChange?: (isSelected: boolean) => void;
    /**
     * Function called when tile is clicked.
     */
    readonly onClick?: () => void;
    /**
     * Specifies if checkbox in tile info bar is visible.
     */
    readonly isCheckboxVisible?: boolean;
    /**
     *  Specifies if checkbox in tile info bar is checked.
     */
    readonly isSelected?: boolean;
    /**
     *  Specifies if tile is dragging.
     */
    readonly isDragging?: boolean;
    /**
     * Actions button in tile tool bar.
     */
    readonly actions?: Array<AssetTileActionProps>;
}

/**
 * Component for displaying AssetsTile Selectable type.
 */
export declare const AssetTileSelectable: React_2.ForwardRefExoticComponent<AssetTileSelectableProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Selected props from AssetTileProps for Selectable tile.
 */
export declare interface AssetTileSelectableProps extends AssetTileBaseProps, Pick<AssetTileProps, 'onClick' | 'isSelected' | 'onChange' | 'isDragging' | 'dataTestId'> {
}

/**
 * Component for displaying AssetsTile Skeleton type.
 */
export declare const AssetTileSkeleton: React_2.ForwardRefExoticComponent<React_2.RefAttributes<HTMLDivElement>>;

export declare enum AssetTileType {
    /**
     * Specifies the AssetTile type (Skeleton, Preview, Selectable).
     */
    Preview = "Preview",
    Selectable = "Selectable",
    Skeleton = "Skeleton"
}

export declare const Avatar: React_2.ForwardRefExoticComponent<AvatarProps & React_2.RefAttributes<HTMLDivElement>>;

export declare type AvatarBackgroundType = {
    readonly gradient: Gradients;
};

export declare const AvatarButton: React_2.ForwardRefExoticComponent<AvatarButtonProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface AvatarButtonProps extends SharedAvatarProps, Pick<React.AnchorHTMLAttributes<HTMLButtonElement>, 'onClick' | 'tabIndex'> {
    readonly activated?: boolean;
}

export declare const AvatarLink: React_2.ForwardRefExoticComponent<AvatarLinkProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface AvatarLinkProps extends SharedAvatarProps, Pick<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href' | 'target' | 'onClick' | 'tabIndex'> {
}

export declare interface AvatarProps extends SharedAvatarProps {
}

export declare enum AvatarSize {
    L = "L",
    M = "M",
    S = "S",
    XS = "XS"
}

export declare const BarItem: React_2.ForwardRefExoticComponent<BarItemProps & React_2.RefAttributes<HTMLDivElement>>;

export declare const BarItemDraggable: React_2.ForwardRefExoticComponent<BarItemDraggableProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface BarItemDraggableProps extends BarItemProps {
    readonly draggableId: string;
    readonly index: number;
}

export declare const BarItemGroup: {
    (props: BarItemGroupProps): JSX_2.Element;
    displayName: string;
};

export declare interface BarItemGroupProps {
    readonly droppableId: string;
    readonly onDragEnd: (result: DropResult) => void;
    readonly children: React.ReactNode;
}

export declare interface BarItemHeaderColumn {
    readonly width?: number;
    readonly align?: BarItemHeaderColumnAlign;
    readonly content: React.ReactNode;
}

export declare enum BarItemHeaderColumnAlign {
    Left = "left",
    Right = "right"
}

export declare interface BarItemProps extends UITestProps {
    readonly dragElement?: React.ReactNode;
    readonly leadingButtons?: LeadingButtonProps[];
    readonly expanded?: boolean;
    readonly isDragging?: boolean;
    readonly onHeaderClick?: () => void;
    readonly children?: React.ReactNode;
    readonly headerColumns?: BarItemHeaderColumn[];
    readonly disabled?: boolean;
}

declare interface BaseButtonProps extends UITestProps {
    readonly renderComponent: (props: InjectedProps) => React.ReactNode;
    readonly size?: ButtonSize;
    readonly color?: ButtonColor;
    readonly label?: string;
    readonly icon?: IconName;
    readonly trailingIcon?: IconName;
    readonly active?: boolean;
    readonly badge?: boolean;
    readonly fillContainer?: boolean;
    readonly destructive?: boolean;
    readonly inProgress?: boolean;
    readonly disabled?: boolean;
    readonly borderless?: boolean;
    readonly tabIndex?: number;
    readonly dragHandleProps?: DraggableProvidedDragHandleProps | null;
    readonly className?: string;
}

declare interface BaseNotificationBarProps extends UITestProps {
    readonly type: NotificationBarType;
    readonly onDismiss?: () => void;
    /**
     * Disables the increase styling when the notification bar height is increased.
     */
    readonly noAutoIncrease?: boolean;
    /**
     * Dangerously sets notification content as inner HTML. Applies only to the text content.
     */
    readonly childrenAsHtml?: boolean;
    /**
     * Disables the bold weight of the text.
     */
    readonly noBoldWeight?: boolean;
    readonly children: string | React.ReactNode;
}

declare interface BaseSimpleStatusProps extends UITestProps {
    readonly spread?: boolean;
    readonly type: SimpleStatusType;
    readonly labelColor?: Colors;
    readonly iconColor?: Colors;
    readonly content: Content;
    readonly size?: SimpleStatusSize;
}

/**
 * Action button props.
 */
declare interface BaseTileActionProps extends Omit<ButtonProps, 'type' | 'size'> {
}

/**
 * Base props that should be available in all tile types and info bar, toolbar, image preview
 */
declare interface BaseTileBaseProps {
    /**
     * Tile image name (required).
     */
    readonly name: string;
    /**
     * Tile image url.
     */
    readonly url?: string;
    /**
     * Error state when uploading file.
     */
    readonly errorState?: {
        /**
         * Error message tooltip location (if the error message is longer than tile).
         */
        readonly tooltipPlacement?: TooltipPlacement;
        /**
         * Explains why the error occurred.
         */
        readonly errorMessage: string;
        /**
         * Function to close tile with error.
         */
        readonly onErrorClose: () => void;
    };
    /**
     * Indicates that user is missing permission to view the tile.
     */
    readonly isMissingPermission?: boolean;
    /**
     * Indicates uploading a file.
     */
    readonly uploadState?: {
        /**
         * Indicates the percentage of loading progress.
         */
        readonly uploadProgress?: number;
        /**
         * Function to close uploading tile.
         */
        readonly onUploadCancel?: () => void;
    };
    /***
     * Disabled tile. Tile is not clickable, it has disabled styles (required).
     */
    readonly disabled: boolean;
    /**
     * Tile width and height.
     */
    readonly dimensions?: {
        readonly width: number;
        readonly height: number;
    };
    /**
     * AssetTile image size.
     */
    readonly size?: number;
}

declare enum BaseTilePreviewIconSize {
    XXL = "XXL",
    L = "L"
}

declare interface BaseTileProps extends BaseTileBaseProps, UITestProps {
    /**
     * Tile width and height.
     */
    readonly dimensions?: {
        readonly width: number;
        readonly height: number;
    };
    /**
     * Specifies the tile type: Skeleton, Preview, Selectable (required).
     */
    readonly type: BaseTileType;
    /**
     * Function called when checkbox is clicked.
     */
    readonly onChange?: (isSelected: boolean) => void;
    /**
     * Function called when tile is clicked.
     */
    readonly onClick?: () => void;
    /**
     * Specifies if checkbox in tile info bar is visible.
     */
    readonly isCheckboxVisible?: boolean;
    /**
     *  Specifies if checkbox in tile info bar is checked.
     */
    readonly isSelected?: boolean;
    /**
     *  Specifies if tile is dragging.
     */
    readonly isDragging?: boolean;
    /**
     * Actions button in tile tool bar.
     */
    readonly actions?: Array<BaseTileActionProps>;
    /**
     * Tile image size.
     */
    readonly size?: number;
    /**
     * Tile node ahead of name.
     */
    readonly nameLeadingNode?: React.ReactNode;
    /**
     * Tile content type.
     */
    readonly contentType?: string;
    /**
     * Size of tile preview icon.
     */
    readonly previewIconSize?: BaseTilePreviewIconSize;
    /**
     * Tile icon in preview.
     */
    readonly previewIcon?: IconName;
    /**
     * Tooltip to display when tile is disabled.
     */
    readonly inactiveMessage?: string;
    /**
     * Function called on checkbox change, by default, the onCLick function is called.
     */
    readonly selectOnClick?: boolean;
    /**
     * Drag element for the tile.
     */
    readonly dragElement?: JSX.Element;
}

declare enum BaseTileType {
    /**
     * Specifies the BaseTile type (Skeleton, Preview, Selectable).
     */
    Preview = "Preview",
    Selectable = "Selectable",
    Skeleton = "Skeleton"
}

declare interface BaseTreeNodeProps {
    /**
     * Indicates level of nesting of this node.
     */
    readonly level: number;
    /**
     * Identifier of the node.
     */
    readonly nodeIdentifier: TreeNodeId;
    /**
     * Event fired when the node state is toggled.
     * @param isExpanded Indicates if node is currently expanded.
     */
    readonly onNodeToggle?: (isExpanded: boolean) => void;
    /**
     * Event fired when the node is clicked.
     * @param identifier ID of the clicked node.
     */
    readonly onNodeClick?: (identifier: TreeNodeId) => void;
    /**
     * Direct children nodes of the current node.
     */
    readonly children?: React.ReactNode;
    /**
     * Indicates if node is in the loading state. Defaults to `false`.
     */
    readonly loading?: boolean;
    /**
     * Indicates if node is expanded. Defaults to `false`.
     */
    readonly isExpanded?: boolean;
    /**
     * Indicates if node can be toggled. Defaults to `true`.
     */
    readonly isToggleable?: boolean;
    /**
     * Indicates if node can be selected. Defaults to `true`.
     */
    readonly isSelectable?: boolean;
    /**
     * Indicates if node can be toggled. Defaults to `false`.
     */
    readonly toggleDisabled?: boolean;
    /**
     * Indicates if expand button is hidden on zero level. Defaults to `true`.
     */
    readonly omitExpandButtonOnZeroLevel?: boolean;
    /**
     * Indicates if expand button is hidden.
     * This differs from `isToggleable` in that this property does not leave an empty cell in its place when used.
     * Defaults to `false`.
     */
    readonly omitExpandButton?: boolean;
    /**
     * Indicates if padding should be omitted on zero level. Defaults to `true`.
     */
    readonly omitPaddingOnZeroLevel?: boolean;
    /**
     * Function to render trailing sticky part of the node. Ensures only proper position of rendered components.
     * @param nodeRef Reference to the node HTML element.
     * @param isNodeSelected Indicates if node is currently selected.
     * @param isNodeHovered Indicates if node is currently hovered.
     * @param onActionableclick Event to fire when actionable element is clicked to notify the tree node component.
     */
    readonly renderTrailing?: (nodeRef: Element | null, isNodeSelected: boolean, isNodeHovered: boolean, onActionableClick: () => void) => React.ReactNode;
    /**
     * Indicates if node is disabled. Defaults to `false`.
     */
    readonly disabled?: boolean;
    /**
     * Test-id attribute of the current node.
     */
    readonly dataTestIdNode?: string;
    /**
     * Test-id of the row of the node.
     */
    readonly dataTestIdNodeRow?: string;
    /**
     * Test-id attribute of the node's children.
     */
    readonly dataTestIdNodeChildren?: string;
}

declare interface BaseTreeViewProps extends UITestProps {
    /**
     * Children components of the tree.
     */
    readonly children: React.ReactNode;
    /**
     * Name of the CSS class passed to the tree element.
     */
    readonly className?: string;
    /**
     * Width of the tree view in pixels.
     */
    readonly width?: number;
}

export declare enum BorderRadius {
    RadiusL = "16px",
    RadiusM = "8px",
    RadiusS = "4px",
    RadiusPill = "5000px"
}

export declare const Box: React_2.ForwardRefExoticComponent<BoxProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface BoxProps extends LayoutComponentProps, UITestProps {
    readonly spacing?: Spacing;
    readonly spacingX?: Spacing;
    readonly spacingY?: Spacing;
    readonly spacingTop?: Spacing;
    readonly spacingRight?: Spacing;
    readonly spacingBottom?: Spacing;
    readonly spacingLeft?: Spacing;
}

export declare interface BreadcrumbProps {
    readonly text?: string;
    readonly path: string;
}

export declare const Breadcrumbs: React_2.ForwardRefExoticComponent<BreadcrumbsProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface BreadcrumbsProps {
    readonly status?: React.ReactNode;
    readonly shorten?: boolean;
    readonly pin?: PinProps;
    readonly breadcrumbs: BreadcrumbProps[];
    readonly onCollapsedToMinWidthChange?: (isCollapsedToMinWidth: boolean) => void;
    readonly containerRef?: React.RefObject<HTMLElement>;
}

export declare const BrowseButton: React_2.ForwardRefExoticComponent<BrowseButtonProps & React_2.RefAttributes<HTMLButtonElement>>;

export declare interface BrowseButtonProps {
    /**
     * File types which file input should accept.
     */
    readonly accept?: string;
    /**
     * Indicates if the browse button is disabled. Defaults to `false`.
     */
    readonly disabled?: boolean;
    /**
     * Text displayed in button label.
     */
    readonly label: string;
    /**
     * The tooltip message displayed when the browse button is disabled.
     */
    readonly inactiveMessage?: string;
    /**
     * Indicates if the file input allows multiple files to be uploaded. Defaults to `true`.
     */
    readonly allowMultipleFiles?: boolean;
    /**
     * Event handler fired when file is being uploaded.
     * @param files list of uploaded files.
     */
    readonly onUpload: (files: FileList) => void;
}

export declare const Button: React_2.ForwardRefExoticComponent<ButtonProps & React_2.RefAttributes<HTMLDivElement>>;

export declare enum ButtonColor {
    Primary = "primary",
    Secondary = "secondary",
    Tertiary = "tertiary",
    Quinary = "quinary"
}

export declare interface ButtonProps extends HTMLButtonProps, Omit<BaseButtonProps, 'renderComponent'> {
    readonly type?: ButtonType;
    readonly buttonRef?: RefObject<HTMLButtonElement>;
    readonly tooltipAppendTo?: Element;
}

export declare enum ButtonSize {
    XS = "XS",
    S = "S",
    M = "M",
    L = "L"
}

export declare enum ButtonType {
    Button = "button",
    Submit = "submit",
    Reset = "reset"
}

export declare const Callout: React_2.ForwardRefExoticComponent<CalloutProps & React_2.RefAttributes<HTMLDivElement>>;

export declare const calloutMaxWidthOnDesk = "600px";

export declare enum CalloutPlacementType {
    OnPaper = "onPaper",
    OnDesk = "onDesk"
}

export declare interface CalloutProps extends UITestProps {
    readonly headline?: string;
    readonly subheadline?: string;
    readonly type: CalloutType;
    readonly placement: CalloutPlacementType;
    readonly actionButton?: React.ReactNode;
    readonly children?: React.ReactNode;
    readonly maxWidth?: string | number;
}

export declare enum CalloutType {
    QuickTip = "quickTip",
    FriendlyWarning = "friendlyWarning"
}

export declare const Card: React_2.ForwardRefExoticComponent<CardProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface CardProps extends UITestProps {
    readonly children: React.ReactNode;
    readonly footer?: React.ReactNode;
    readonly headline?: string;
    /**
     * Indicates if the card should fill full height of the parent.
     */
    readonly fullHeight?: boolean;
}

declare type CategoryId = string;

export declare enum CellType {
    Action = "action",
    String = "string",
    Component = "component",
    NamedComponent = "namedComponent"
}

export declare const ChartLicense: ({ children }: ChartLicenseProps) => JSX_2.Element;

declare interface ChartLicenseProps {
    readonly children: React_2.ReactNode;
}

export declare const Checkbox: React_2.ForwardRefExoticComponent<CheckboxProps & React_2.RefAttributes<HTMLDivElement>>;

declare type CheckboxBaseProps = Pick<React.InputHTMLAttributes<HTMLInputElement>, 'name' | 'onClick' | 'disabled' | 'tabIndex'> & UITestProps;

export declare interface CheckboxProps extends CheckboxBaseProps {
    /**
     * Size of the checkbox.
     */
    readonly size?: CheckboxSize;
    /**
     * A text label to be displayed. If no value provided a consumer will need to provide their own enclosing label.
     */
    readonly label?: string;
    /**
     * Indicates a checked state. Defaults to `false`. `undefined` when `indetermined` is true.
     */
    readonly checked?: boolean;
    /**
     * Indicates an indetermined state. Defaults to `false`.
     */
    readonly indetermined?: boolean;
    /**
     * Indicates whether the checkbox should indicate a high importance. Defaults to `false`.
     */
    readonly invalid?: boolean;
    /**
     * Allows consumer to bind an `onChange` event handler.
     */
    readonly onChange?: (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void;
    /**
     * Indicates wether the checkbox is highlighted. Applies only when not disabled and not indicating a high importance. Defaults to `false`.
     */
    readonly highlighted?: boolean;
    readonly explanationText?: string;
    readonly inactiveMessage?: string;
    readonly labelIcon?: IconName;
    readonly labelIconTooltip?: string;
    readonly validationMessage?: string;
    /**
     * Indicates whether required sign should be disabled next to the label.
     */
    readonly markAsRequired?: boolean;
    readonly inputRef?: RefObject<HTMLInputElement>;
    /**
     * Dangerously sets explanation text as inner HTML.
     */
    readonly explanationTextAsHtml?: boolean;
    /**
     * Dangerously sets tooltip as inner HTML.
     */
    readonly tooltipAsHtml?: boolean;
    /**
     * Label actions element.
     */
    readonly labelActionsElement?: React.ReactNode;
}

export declare enum CheckboxSize {
    S = "S",
    M = "M",
    L = "L"
}

/**
 * Code editor component.
 */
export declare const CodeEditor: React_2.ForwardRefExoticComponent<CodeEditorProps & React_2.RefAttributes<ReactCodeMirrorRef>>;

/**
 * Supported languages of code editor.
 */
export declare enum CodeEditorLanguage {
    Html = "html",
    Css = "css",
    Sql = "sql",
    Xml = "xml",
    Javascript = "javascript"
}

/**
 * Code editor props based on codemirror.
 */
export declare interface CodeEditorProps extends Omit<ReactCodeMirrorProps, 'extensions' | 'readOnly' | 'editable'> {
    readonly language: CodeEditorLanguage;
    readonly disabled?: boolean;
    readonly label?: string;
    readonly validationMessage?: string;
    readonly invalid?: boolean;
    readonly value?: string;
    readonly explanationText?: string;
    readonly inactiveMessage?: string;
    readonly labelIcon?: IconName;
    readonly labelIconTooltip?: string;
    readonly markAsRequired?: boolean;
    /**
     * Test id data attribute.
     */
    readonly dataTestId?: string;
    /**
     * Dangerously sets explanation text as inner HTML.
     */
    readonly explanationTextAsHtml?: boolean;
    /**
     * Dangerously sets tooltip as inner HTML.
     */
    readonly tooltipAsHtml?: boolean;
    /**
     * Label actions element.
     */
    readonly labelActionsElement?: React.ReactNode;
}

export declare enum Colors {
    AlertActive = "var(--color-alert-active)",
    AlertBackgroundHighEmphasis = "var(--color-alert-background-high-emphasis)",
    AlertBackgroundLowEmphasis = "var(--color-alert-background-low-emphasis)",
    AlertBackgroundLowEmphasisHover = "var(--color-alert-background-low-emphasis-hover)",
    AlertBackgroundSelected = "var(--color-alert-background-selected)",
    AlertBackgroundSelectedHover = "var(--color-alert-background-selected-hover)",
    AlertFocus = "var(--color-alert-focus)",
    AlertHover = "var(--color-alert-hover)",
    AlertIcon = "var(--color-alert-icon)",
    AlertText = "var(--color-alert-text)",
    BackgroundDesk = "var(--gradient-background-desk)",
    BackgroundDisabled = "var(--color-background-disabled)",
    BackgroundDragged = "var(--color-background-dragged)",
    BackgroundHighlighted = "var(--color-background-highlighted)",
    BackgroundSelected = "var(--color-background-selected)",
    BackgroundSelectedHover = "var(--color-background-selected-hover)",
    BackgroundSideMenu = "var(--color-background-side-menu)",
    BackgroundButtonOnDarkHover = "var(--color-background-button-on-dark-hover)",
    BackgroundShelfSolid = "var(--color-background-shelf-solid)",
    BackgroundTagDefault = "var(--color-background-tag-default)",
    BackgroundTagGrey = "var(--color-background-tag-grey)",
    BackgroundTagKenticoOrange = "var(--color-background-tag-kentico-orange)",
    BackgroundTagKontentTurquoise = "var(--color-background-tag-kontent-turquoise)",
    BackgroundTagMajorelleBlue = "var(--color-background-tag-majorelle-blue)",
    BackgroundTagNeonGreen = "var(--color-background-tag-neon-green)",
    BackgroundTagRose = "var(--color-background-tag-rose)",
    BackgroundTagSkyBlue = "var(--color-background-tag-sky-blue)",
    BackgroundTagUltramarineBlue = "var(--color-background-tag-ultramarine-blue)",
    BackgroundTagWarmGrey = "var(--color-background-tag-warm-grey)",
    BackgroundTagXperienceViolet = "var(--color-background-tag-xperience-violet)",
    BackgroundTagYellow = "var(--color-background-tag-yellow)",
    BaritemHeaderBackground = "var(--color-baritem-header-background)",
    BorderActive = "var(--color-border-active)",
    BorderAlert = "var(--color-border-alert)",
    BorderDefault = "var(--color-border-default)",
    BorderDisabled = "var(--color-border-disabled)",
    BorderHover = "var(--color-border-hover)",
    BorderWarning = "var(--color-border-warning)",
    CommentBackgroundSelected = "var(--color-comment-background-selected)",
    DividerDefault = "var(--color-divider-default)",
    Focus = "var(--color-focus)",
    FocusLight = "var(--color-focus-light)",
    GradientProduct = "var(--gradient-product)",
    GradientProductHover = "var(--gradient-product-hover)",
    Hover = "var(--color-hover)",
    IconDefault = "var(--color-icon-default)",
    IconDefaultOnDark = "var(--color-icon-default-on-dark)",
    IconDisabled = "var(--color-icon-disabled)",
    IconHighlighted = "var(--color-icon-highlighted)",
    IconLargeDefault = "var(--color-icon-large-default)",
    IconLowEmphasis = "var(--color-icon-low-emphasis)",
    InfoBackgroundHighEmphasis = "var(--color-info-background-high-emphasis)",
    InfoBackgroundLowEmphasis = "var(--color-info-background-low-emphasis)",
    InfoIcon = "var(--color-info-icon)",
    InfoText = "var(--color-info-text)",
    InputBackground = "var(--color-input-background)",
    InputBorder = "var(--color-input-border)",
    Link = "var(--color-link)",
    LinkHover = "var(--color-link-hover)",
    LinkVisited = "var(--color-link-visited)",
    LinkVisitedHover = "var(--color-link-visited-hover)",
    OverlayBackground = "var(--color-overlay-background)",
    PaperBackground = "var(--color-paper-background)",
    PaperBorder = "var(--color-paper-border)",
    Product = "var(--color-product)",
    ProductHover = "var(--color-product-hover)",
    ProductSelected = "var(--color-product-selected)",
    ProductSelectedHover = "var(--color-product-selected-hover)",
    SearchBackgroundHighlighted = "var(--color-search-background-highlighted)",
    MacroBackgroundHighlighted = "var(--color-macro-background-highlighted)",
    MacroBackgroundSelected = "var(--color-macro-background-selected)",
    ShelfBackground = "var(--color-shelf-background)",
    SkeletonBackground = "var(--color-skeleton-background)",
    SkeletonContent = "var(--color-skeleton-content)",
    SuccessBackgroundLowEmphasis = "var(--color-success-background-low-emphasis)",
    SuccessIcon = "var(--color-success-icon)",
    SuccessText = "var(--color-success-text)",
    SuggestionBackgroundHighlighted = "var(--color-suggestion-background-highlighted)",
    SuggestionBackgroundSelected = "var(--color-suggestion-background-selected)",
    SuccessBackgroundHighEmphasis = "var(--color-success-background-high-emphasis)",
    SwitchOffBackground = "var(--color-switch-off-background)",
    SwitchOffBackgroundHovered = "var(--color-switch-off-background-hovered)",
    SwitchOnDisabledBackground = "var(--color-switch-on-disabled-background)",
    TabIcon = "var(--color-tab-icon)",
    TabIconHover = "var(--color-tab-icon-hover)",
    TabIconSelected = "var(--color-tab-icon-selected)",
    TabText = "var(--color-tab-text)",
    TabTextHover = "var(--color-tab-text-hover)",
    TextDefaultOnDark = "var(--color-text-default-on-dark)",
    TextDefaultOnLight = "var(--color-text-default-on-light)",
    TextDisabled = "var(--color-text-disabled)",
    TextHighEmphasis = "var(--color-text-high-emphasis)",
    TextHint = "var(--color-text-hint)",
    TextLowEmphasis = "var(--color-text-low-emphasis)",
    ToggleIcon = "var(--color-toggle-icon)",
    ToggleIconHover = "var(--color-toggle-icon-hover)",
    ToggleText = "var(--color-toggle-text)",
    ToggleTextHover = "var(--color-toggle-text-hover)",
    ToggleTextSelected = "var(--color-toggle-text-selected)",
    ToggleIconSelected = "var(--color-toggle-icon-selected)",
    TooltipBackground = "var(--color-tooltip-background)",
    TooltipIcon = "var(--color-tooltip-icon)",
    WarningBackgroundHighEmphasis = "var(--color-warning-background-high-emphasis)",
    WarningBackgroundLowEmphasis = "var(--color-warning-background-low-emphasis)",
    WarningIcon = "var(--color-warning-icon)",
    WarningText = "var(--color-warning-text)"
}

export declare enum Cols {
    Col1 = "1",
    Col2 = "2",
    Col3 = "3",
    Col4 = "4",
    Col5 = "5",
    Col6 = "6",
    Col7 = "7",
    Col8 = "8",
    Col9 = "9",
    Col10 = "10",
    Col11 = "11",
    Col12 = "12"
}

export declare const Column: React_2.ForwardRefExoticComponent<ColumnProps & React_2.RefAttributes<HTMLDivElement>>;

export declare enum ColumnContentType {
    Action = "action",
    Text = "text",
    Component = "component"
}

export declare interface ColumnProps extends LayoutComponentProps, UITestProps {
    readonly width?: number;
    readonly cols?: Cols;
    readonly colsSm?: Cols;
    readonly colsMd?: Cols;
    readonly colsLg?: Cols;
    readonly order?: Cols;
    readonly orderSm?: Cols;
    readonly orderMd?: Cols;
    readonly orderLg?: Cols;
    readonly fullHeight?: boolean;
}

export declare interface ComponentCell extends TableCell {
    /**
     * Component to be displayed in the cell.
     */
    component: any;
}

export declare const Condition: React_2.ForwardRefExoticComponent<ConditionProps & React_2.RefAttributes<HTMLDivElement>>;

export declare const ConditionBuilder: React_2.ForwardRefExoticComponent<ConditionBuilderProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ConditionBuilderProps {
    readonly children?: React.ReactNode;
    readonly onActionClick?: () => void;
    readonly isActionVisible?: boolean;
    readonly actionLabel: string;
}

export declare const ConditionGroup: React_2.ForwardRefExoticComponent<ConditionGroupProps & React_2.RefAttributes<HTMLDivElement>>;

export declare const ConditionGroupOverview: React_2.ForwardRefExoticComponent<ConditionGroupOverviewProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ConditionGroupOverviewProps {
    readonly children: React.ReactNode;
}

export declare interface ConditionGroupProps {
    readonly children?: React.ReactNode;
    readonly isActionVisible?: boolean;
    readonly onActionClick?: () => void;
    readonly actionLabel: string;
}

export declare const ConditionOperatorLine: React_2.ForwardRefExoticComponent<ConditionOperatorLineProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ConditionOperatorLineProps {
    readonly operator: string;
}

export declare const ConditionOperatorOverview: React_2.ForwardRefExoticComponent<ConditionOperatorOverviewProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ConditionOperatorOverviewProps {
    readonly operator: string;
    readonly type: ConditionOperatorOverviewType;
}

export declare enum ConditionOperatorOverviewType {
    ConditionSeparator = "conditionSeparator",
    GroupSeparator = "groupSeparator"
}

export declare const ConditionOperatorSelect: React_2.ForwardRefExoticComponent<ConditionOperatorSelectProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ConditionOperatorSelectProps {
    readonly children: React.ReactNode;
    readonly deleteButton?: DeleteButtonProps;
}

export declare const ConditionPicker: React_2.ForwardRefExoticComponent<ConditionPickerProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ConditionPickerItem {
    readonly value: string;
    readonly label: string;
}

export declare interface ConditionPickerProps {
    readonly items: ConditionPickerItem[];
    readonly onItemSelect: (item: ConditionPickerItem) => void;
    readonly onClose?: () => void;
    readonly headline?: string;
    readonly selectedCategoryId: CategoryId;
    readonly categories: NameToggleButton[];
    readonly onCategoryChange: (categoryId: CategoryId) => void;
    readonly searchValue?: string;
    readonly onSearch: (searchedText: string) => void;
    readonly noItemsText: string;
    readonly searchPlaceholder?: string;
}

export declare interface ConditionProps {
    readonly children: React.ReactNode;
    readonly deleteButton: DeleteButtonProps;
}

declare type Content = {
    readonly label?: string;
    readonly iconAlign?: SimpleStatusAlign;
    readonly iconName: IconName;
    readonly tooltipText: string;
    readonly tooltipPlacement?: TooltipPlacement;
    readonly tooltipAppendTo?: Element;
} | {
    readonly label: string;
    readonly iconAlign?: SimpleStatusAlign;
    readonly iconName?: IconName;
    readonly tooltipText?: string;
    readonly tooltipPlacement?: TooltipPlacement;
    readonly tooltipAppendTo?: Element;
};

/**
 * Props specific for content item tile.
 */
declare interface ContentItemTileExtendedProps {
    /**
     * Tile node ahead of name.
     */
    readonly nameLeadingNode?: React.ReactNode;
    /**
     * Tile content type.
     */
    readonly contentType: string;
    /**
     * Tile icon in preview.
     */
    readonly previewIcon?: IconName;
    /**
     * Drag element for the tile.
     */
    readonly dragElement?: JSX.Element;
}

/**
 * Component for displaying ContentItemTile Preview type.
 */
export declare const ContentItemTilePreview: React_2.ForwardRefExoticComponent<ContentItemTilePreviewProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Selected props from ContentItemTileProps for Preview tile.
 */
export declare interface ContentItemTilePreviewProps extends ContentItemTileExtendedProps, BaseTileBaseProps, Pick<ContentItemTileProps, 'onClick' | 'isSelected' | 'onChange' | 'isCheckboxVisible' | 'selectOnClick' | 'actions' | 'dataTestId' | 'inactiveMessage' | 'isDragging' | 'dragElement'> {
}

declare interface ContentItemTileProps extends ContentItemTileExtendedProps, Pick<BaseTileProps, 'errorState' | 'url' | 'uploadState' | 'name' | 'disabled' | 'isCheckboxVisible' | 'selectOnClick' | 'isSelected' | 'isDragging' | 'onChange' | 'onClick' | 'dataTestId' | 'actions' | 'inactiveMessage'> {
    /**
     * Type of content item.
     */
    readonly type: ContentItemTileType;
}

/**
 * Component for displaying ContentItemTile Selectable type.
 */
export declare const ContentItemTileSelectable: React_2.ForwardRefExoticComponent<ContentItemTileSelectableProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Selected props from ContentItemTileProps for Selectable tile.
 */
declare interface ContentItemTileSelectableProps extends ContentItemTileExtendedProps, BaseTileBaseProps, Pick<ContentItemTileProps, 'onClick' | 'isSelected' | 'onChange' | 'isDragging' | 'dataTestId' | 'inactiveMessage' | 'actions'> {
}

/**
 * Component for displaying ContentItemTile Skeleton type.
 */
export declare const ContentItemTileSkeleton: React_2.ForwardRefExoticComponent<React_2.RefAttributes<HTMLDivElement>>;

declare enum ContentItemTileType {
    /**
     * Specifies the ContentItemTile type (Skeleton, Preview, Selectable).
     */
    Preview = "Preview",
    Selectable = "Selectable",
    Skeleton = "Skeleton"
}

export declare function createSelectGroup<Group>(): React_2.FC<SelectGroupProps<Group>>;

/**
 * ID of the creating placeholder node in the tree.
 */
export declare const CreatingPlaceholderID: number;

export declare const DateTimePicker: React_2.ForwardRefExoticComponent<DateTimePickerProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface DateTimePickerProps {
    /**
     * Callback called when a day is selected or when clicked on the action button.
     */
    readonly onChange: (date: Date | null) => void;
    /**
     * Current selected Date.
     */
    readonly value: Date | null;
    /**
     * Array of allowed years.
     */
    readonly years: number[];
    /**
     * Array of months.
     */
    readonly months: string[];
    /**
     * Minimal date that can be selected.
     */
    readonly minDate?: Date;
    /**
     * Maximal date that can be selected.
     */
    readonly maxDate?: Date;
    /**
     * If undefined no time picker is selected. Expects settings for the time picker
     */
    readonly timePicker?: TimePicker;
}

export declare enum DateTimePickerTimeFormat {
    Hours12 = "hours12",
    Hours24 = "hours24"
}

export declare interface DateTimePickerTimeValue {
    readonly hours: number;
    readonly minutes: number;
}

declare interface DeleteButtonProps {
    readonly tooltipText: string;
    readonly onDelete: () => void;
}

export declare const Dialog: React_2.ForwardRefExoticComponent<DialogProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface DialogAction extends Omit<DialogFooterActionProps, 'color'> {
}

export declare const dialogConfig: {
    dialogContainerId: string;
};

export declare const dialogContentClass = "dialog_content";

declare interface DialogContentProps extends DialogFooterProps {
    /**
     * Modal's headline.
     */
    readonly headline: string;
    /**
     * Function called when modal requests close.
     */
    readonly onClose: () => void;
    /**
     * Tooltip label for close button located in the header.
     */
    readonly headerCloseButton: HeaderCloseButton;
    /**
     * Dialog content
     */
    readonly children: React.ReactNode;
    /**
     * Additional header elements under the header bar.
     */
    readonly headerContent?: React.ReactNode;
}

declare interface DialogFooterActionProps extends Pick<ButtonProps, 'icon' | 'trailingIcon' | 'destructive' | 'disabled' | 'inProgress' | 'color' | 'onClick'>, UITestProps {
    readonly label: string;
    readonly tooltipText?: string;
}

declare interface DialogFooterProps {
    /**
     * Boolean that determines if the modal can be closed via [Esc], clicking on the overlay and if has close button in the header.
     */
    readonly isDismissable: boolean;
    /**
     * Boolean that determines whether an action is in progress and if so, displays loader confirm button and makes the dialog not dismissable.
     */
    readonly actionInProgress?: boolean;
    /**
     * Modal's primary action.
     */
    readonly confirmAction: DialogAction;
    /**
     * Modal's cancel action.
     */
    readonly cancelAction: DialogAction;
    /**
     * Modal's secondary action.
     */
    readonly secondaryAction?: DialogAction;
    /**
     * Placeholder for the notification bar.
     */
    readonly notificationBar?: React.ReactNode;
}

export declare interface DialogProps extends DialogContentProps, UITestProps {
    /**
     * Boolean indicating if the modal is open (visible).
     */
    readonly isOpen: boolean;
    /**
     * Boolean indicating if the modal should take full space available.
     */
    readonly isFullScreen?: boolean;
    /**
     * Modal's minimal width.
     */
    readonly minWidth?: string | number;
    /**
     * Modal's maximal width.
     */
    readonly maxWidth?: string | number;
    /**
     * Modal's width.
     */
    readonly width?: string | number;
    /**
     * Modal's height.
     */
    readonly height?: string | number;
    /**
     * Modal's minimal height.
     */
    readonly minHeight?: string | number;
    /**
     * Modal's maximal height.
     */
    readonly maxHeight?: string | number;
    /**
     * Boolean indicating if the modal should restore focus to the element that had focus prior to its display.
     */
    readonly shouldReturnFocusAfterClose?: boolean;
    /**
     * Custom class name for the dialog.
     */
    readonly className?: string;
    /**
     * Custom class name for the dialog overlay.
     */
    readonly overlayClassName?: string;
    /**
     * Function that will be run after the modal has closed.
     */
    readonly onAfterClose?: () => void;
    /**
     * Function that will be run after the modal has opened.
     */
    readonly onAfterOpen?: () => void;
    /**
     * Function that will be run when the user clicks outside the modal.
     */
    readonly onOverlayClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
}

export declare enum Dimensions {
    GridUnit = "8px"
}

declare type DivBaseProps = Pick<React.HTMLProps<HTMLDivElement>, 'children'>;

export declare const Divider: React_2.ForwardRefExoticComponent<DividerProps & React_2.RefAttributes<HTMLDivElement>>;

export declare enum DividerOrientation {
    Horizontal = "horizontal",
    Vertical = "vertical"
}

export declare interface DividerProps {
    readonly orientation: DividerOrientation;
    readonly isSubheaderDivider?: boolean;
}

declare interface DraggableTreeNodeProps extends BaseTreeNodeProps {
    /**
     * Displayed name of the node.
     */
    readonly name: string;
    /**
     * Indicates if node has children.
     */
    readonly hasChildren: boolean;
    /**
     * Event handler fired when node is moved using D&D.
     * @param draggedNodeIdentifier Identifier of the node being dragged.
     * @param targetNodeIdentifier Identifier of the node where the dragged node was dropped.
     * @param dropOffset Indicates if the dragged node should be placed above or below.
     */
    readonly dropHandler: (draggedNodeIdentifier: TreeNodeId, targetNodeIdentifier: TreeNodeId, dropOffset: DropPlacement) => void;
    /**
     * Function to render main part of the node. Components rendered with this function are wrapped by element ensuring proper background color when node is selected, hovered or disabled.
     * @param isNodeSelected Indicates if node is currently selected.
     * @param isNodeHovered Indicates if node is currently hovered.
     * @param dragSource Dragged element reference. Pass it as ref for element that should be draggable.
     */
    readonly renderNode: (isNodeSelected: boolean, isNodeHovered: boolean, dragSource?: ConnectDragSource) => React.ReactNode;
}

export declare const DropDownActionMenu: React_2.ForwardRefExoticComponent<DropDownActionMenuProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface DropDownActionMenuProps extends MenuDropDownProps, ActionMenuProps {
}

export declare const DropDownOnClick: {
    ({ renderTrigger, children, dataTestId, offset, placement, open, onToggle, ...props }: DropDownOnClickProps): JSX_2.Element;
    displayName: string;
};

export declare interface DropDownOnClickProps extends DropDownProps {
    readonly renderTrigger: (ref: React.RefObject<HTMLElement>, onTriggerClick: () => void, isOpened: boolean) => React.ReactNode;
    readonly onToggle?: (isOpen: boolean) => void;
}

export declare const DropDownOnHover: {
    ({ renderTrigger, children, offset, placement, open, ...props }: DropDownOnHoverProps): JSX_2.Element;
    displayName: string;
};

export declare interface DropDownOnHoverProps extends DropDownProps {
    readonly renderTrigger: (isOpened: boolean) => React.ReactElement;
}

export declare enum DropDownPlacement {
    Bottom = "bottom",
    Top = "top",
    Left = "left",
    Right = "right",
    BottomStart = "bottom-start",
    BottomEnd = "bottom-end",
    TopStart = "top-start",
    TopEnd = "top-end",
    LeftStart = "left-start",
    LeftEnd = "left-end",
    RightStart = "right-start",
    RightEnd = "right-end"
}

declare interface DropDownProps extends UITestProps {
    readonly placement?: DropDownPlacement;
    readonly offset?: {
        readonly skidding: number;
        readonly distance: number;
    };
    readonly open?: boolean;
    readonly children: React.ReactNode;
}

export declare const DropDownSelectMenu: React_2.ForwardRefExoticComponent<DropDownSelectMenuProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface DropDownSelectMenuProps extends MenuDropDownProps, SelectMenuProps {
}

/**
 * Indicates where the dragged element should be placed relative to the target element.
 */
export declare enum DropPlacement {
    /**
     * Item should be placed above target element.
     */
    Above = "Above",
    /**
     * Item should be placed below target element.
     */
    Below = "Below",
    /**
     * Item should be placed as a first child of the target element. The placement is used when target element has no children.
     */
    Child = "Child"
}

export declare const Dropzone: React_2.ForwardRefExoticComponent<DropzoneProps & React_2.RefAttributes<HTMLDivElement>>;

export declare const DropzoneOverlay: React_2.ForwardRefExoticComponent<DropzoneOverlayProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface DropzoneOverlayProps extends DropzoneProps {
    /**
     * The main title of the dropzone, which will be shown to the user in the center of the screen.
     */
    readonly title?: string;
}

export declare interface DropzoneProps {
    /**
     * Callback method called when files are selected.
     */
    readonly onUpload: (files: FileList) => void;
    /**
     * Callback method for when an item is dragged over the dropzone.
     */
    readonly onActiveChange: (isActive: boolean) => void;
    /**
     * Callback method for checking current data transfer.
     * If null, everything is permitted.
     * If true, drag will be permitted. Otherwise false.
     */
    readonly onCurrentTransfer?: (dataTransfer: DataTransfer) => boolean;
    /**
     * If true, the dropzone is disabled.
     */
    readonly disabled?: boolean;
    /**
     * Children of the node
     */
    readonly children: React.ReactNode;
}

/**
 * The component wraps HTML file input and allows to open file selection dialog and handle uploaded files programmatically. The inner file input is hidden by CSS.
 */
export declare const FileInput: {
    ({ isOpen, accept, allowMultiple, dataTestId, onFileChange, onClose }: FileInputProps): JSX_2.Element;
    displayName: string;
};

export declare interface FileInputProps extends UITestProps {
    /**
     * Indicates if the file dialog should be opened.
     */
    readonly isOpen: boolean;
    /**
     * Indicates if the file input allows multiple files to be uploaded. Defaults to `true`.
     */
    readonly allowMultiple: boolean;
    /**
     * File types which file input should accept.
     */
    readonly accept?: string;
    /**
     * Callback called when the file dialog closes.
     */
    readonly onClose: () => void;
    /**
     * Event handler fired when files are selected.
     * @param files list of selected files.
     */
    readonly onFileChange: (files: FileList) => void;
}

declare enum FileSizeUnit {
    Byte = "byte",
    Kilobyte = "kilobyte",
    Megabyte = "megabyte",
    Gigabyte = "gigabyte"
}

export declare function forceClickOutside(e?: MouseEvent): void;

/**
 * Formats file size to a readable string.
 * @param fileSizeObject Object containing formatted file size and units.
 * @returns Formatted file size string.
 */
export declare const formatFileSize: (fileSizeObject: FormattedFileSize | null) => string | null;

declare type FormattedFileSize = {
    fileSize: string;
    unit: FileSizeUnit;
};

export declare const FormItemWrapper: React_2.ForwardRefExoticComponent<FormItemWrapperProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface FormItemWrapperProps extends UITestProps {
    readonly id?: string;
    readonly inline?: boolean;
    readonly label?: string;
    readonly markAsRequired?: boolean;
    readonly disabled?: boolean;
    readonly inactiveMessage?: string;
    readonly labelIcon?: IconName;
    readonly labelIconTooltip?: string;
    readonly labelClassnames?: string;
    readonly footerClassnames?: string;
    readonly subheadlineClassnames?: string;
    readonly childrenWrapperClassnames?: string;
    readonly inlineWrapperClassnames?: string;
    readonly invalid?: boolean;
    readonly validationMessage?: string;
    readonly statusText?: string;
    readonly explanationText?: string;
    readonly children: React_2.ReactNode;
    /**
     * Dangerously sets explanation text as inner HTML.
     */
    readonly explanationTextAsHtml?: boolean;
    /**
     * Dangerously sets tooltip as inner HTML.
     */
    readonly tooltipAsHtml?: boolean;
    readonly onInlineWrapperClick?: (e: React_2.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    readonly labelActionsElement?: React_2.ReactNode;
}

/** Configurator enables custom Froala Typescript plugins to use global Froala configuration methods, which would be unavailable due to different module context. */
export declare interface FroalaEditorConfigurator {
    readonly defineIcon: (iconName: string, parameters: Partial<DefineIconParameters>) => void;
    readonly registerCommand: (buttonName: string, parameters: Partial<RegisterCommandParameters>) => void;
    readonly disableButton: (buttonName: string, buttonTitle?: string) => void;
    readonly enableButton: (buttonName: string, buttonTitle?: string) => void;
}

export declare const FunnelChart: React_2.ForwardRefExoticComponent<FunnelChartProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface FunnelChartData {
    /**
     * Stage of the funnel to be displayed in its label.
     */
    readonly stage: string;
    /**
     * Number to be visualized for particular stage.
     */
    readonly interactions: number;
}

export declare interface FunnelChartProps extends UITestProps {
    /**
     * Data to be displayed in the chart.
     */
    readonly data: FunnelChartData[];
    /**
     * ID unique for a chart displayed on the page.
     */
    readonly chartId: string;
    /**
     * Orientation of the funnel.
     */
    readonly orientation: FunnelOrientation;
    /**
     * Locale which to use for displaying numbers, e.g. 'en_US'.
     */
    readonly locale: string;
}

/**
 * Enum selecting the orientation of funnel chart.
 */
export declare enum FunnelOrientation {
    Horizontal = "horizontal",
    Vertical = "vertical"
}

declare interface GeneratedIconProps {
}

/**
 * Function which formats input string into correct format for dataTestId
 * @param input Input string to be transformed into dataTestId format
 * @param fallback Fallback string to be used if input is undefined or empty
 * @returns String in a correct format for dataTestId
 */
export declare function getDataTestId(input: string): string;

export declare function getDataTestId(input: string | undefined, fallback: string): string;

/**
 * Converts file size from bytes to other units to make the size readable.
 * If the converted file size is less than DecimalSizeLimit and rounding the number doesn't degrade it to integer,
 * the file size is rounded and formatted to a number of fraction digits specified by DecimalDigits,
 * otherwise the file size is rounded and formatted to a whole number.
 * @param fileSizeInBytes File size to be formatted.
 * @returns Object containing formatted file size and units.
 */
export declare const getFileSizeObject: (fileSizeInBytes: number) => FormattedFileSize | null;

export declare enum Gradients {
    VeryLightWarmGrey = "var(--gradient-very-light-warm-grey)",
    Medium = "var(--gradient-medium)",
    DarkGrey = "var(--gradient-dark-grey)",
    DarkWarmGrey = "var(--gradient-dark-warm-grey)",
    DarkNeonGreen = "var(--gradient-dark-neon-green)",
    DarkKontentTurquoise = "var(--gradient-dark-kontent-turquoise)",
    DarkSkyBlue = "var(--gradient-dark-sky-blue)",
    DarkUltramarineBlue = "var(--gradient-dark-ultramarine-blue)",
    DarkMajorelleBlue = "var(--gradient-dark-majorelle-blue)",
    DarkXperienceViolet = "var(--gradient-dark-xperience-violet)",
    DarkRose = "var(--gradient-dark-rose)",
    DarkRed = "var(--gradient-dark-red)",
    DarkKenticoOrange = "var(--gradient-dark-kentico-orange)",
    DarkYellow = "var(--gradient-dark-yellow)",
    LightGrey = "var(--gradient-light-grey)",
    LightWarmGrey = "var(--gradient-light-warm-grey)",
    LightNeonGreen = "var(--gradient-light-neon-green)",
    LightKontentTurquoise = "var(--gradient-light-kontent-turquoise)",
    LightSkyBlue = "var(--gradient-light-sky-blue)",
    LightUltramarineBlue = "var(--gradient-light-ultramarine-blue)",
    LightMajorelleBlue = "var(--gradient-light-majorelle-blue)",
    LightXperienceViolet = "var(--gradient-light-xperience-violet)",
    LightRose = "var(--gradient-light-rose)",
    LightRed = "var(--gradient-light-red)",
    LightKenticoOrange = "var(--gradient-light-kentico-orange)",
    LightYellow = "var(--gradient-light-yellow)"
}

export declare const Grid: React_2.ForwardRefExoticComponent<GridProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface GridProps extends LayoutComponentProps, UITestProps {
    readonly cols?: number;
    readonly rowGap?: Spacing;
    readonly columnGap?: Spacing;
}

export declare type HandleDirection = 'left' | 'right' | 'top' | 'bottom';

export declare interface HeaderCloseButton extends Pick<TooltipProps, 'tooltipText' | 'shortcuts'> {
}

export declare enum HeaderSelection {
    None = "None",
    Some = "Some",
    All = "All"
}

export declare const Headline: React_2.ForwardRefExoticComponent<HeadlineProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface HeadlineProps extends Pick<BoxProps, 'spacingTop' | 'spacingBottom' | 'spacingY'> {
    readonly children?: React.ReactNode;
    readonly size: HeadlineSize;
    readonly labelColor?: Colors;
}

export declare enum HeadlineSize {
    S = "S",
    M = "M",
    L = "L"
}

export declare const HorizontalActionMenu: React_2.ForwardRefExoticComponent<HorizontalActionMenuProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Represents an action item in the HorizontalActionMenu.
 */
export declare interface HorizontalActionMenuItem {
    /**
     * Label displayed in action button and in DropDownActionMenu when actions cannot fit into the parent container.
     */
    readonly label: string;
    /**
     * Tooltip of action button.
     */
    readonly title?: string;
    /**
     * Icon displayed in action button and in DropDownActionMenu when actions cannot fit into the parent container.
     */
    readonly icon?: IconName;
    /**
     * Indicates if action is destructive.
     */
    readonly destructive?: boolean;
    /**
     * Indicates if action is disabled.
     */
    readonly disabled?: boolean;
    /**
     * Identifier of the action.
     */
    readonly identifier: string;
    /**
     * Action to be performed after button click.
     */
    readonly onClick: (e: MouseEvent_2<HTMLElement> | KeyboardEvent_2<HTMLElement>) => void;
}

/**
 * Represents properties of the HorizontalActionMenu component.
 */
export declare interface HorizontalActionMenuProps {
    /**
     * Menu items displayed in HorizontalActionMenu.
     */
    readonly actionItems: HorizontalActionMenuItem[];
    /**
     * Label displayed in HorizontalActionMenu.
     */
    readonly label: string | null;
    /**
     * Determines if action buttons should be visible in HorizontalActionMenu.
     */
    readonly areActionsVisible: boolean;
    /**
     * Label displayed in 'More actions' button.
     */
    readonly moreActionsButtonLabel: string;
}

declare type HTMLButtonProps = Pick<React.ButtonHTMLAttributes<HTMLButtonElement>, 'title' | 'onClick'>;

/**
 * Represents html sanitizer configuration.
 */
export declare type HTMLSanitizerConfig = Pick<FroalaOptions, 'htmlAllowedTags' | 'htmlAllowedAttrs'>;

export declare const Icon: React_2.ForwardRefExoticComponent<IconProps & React_2.RefAttributes<SVGSVGElement>>;

declare interface IconButtonProps extends Pick<ToggleButtonBaseProps, 'onClick' | 'ariaLabel' | 'isSelected'> {
    readonly icon: IconName;
}

export declare type IconName = IconNameMap[keyof typeof KXIconSets];

declare type IconNameMap = {
    [K in IconSet]: keyof (typeof KXIconSets)[K];
};

/** Icon component properties */
export declare interface IconProps {
    /**
     * Icon name.
     */
    readonly name: IconName;
    /**
     * Used as fallback icon name in case of missing primary icon.
     */
    readonly fallbackIconName?: IconName;
    /**
     * Icon set.
     */
    readonly iconSet?: keyof typeof KXIconSets;
    /**
     * Fallback icon set.
     */
    readonly fallbackIconSet?: keyof typeof KXIconSets;
}

declare type IconSet = keyof typeof KXIconSets;

export declare enum IconSize {
    XXS = "8px",
    XS = "12px",
    S = "16px",
    M = "20px",
    L = "24px",
    XL = "32px"
}

export declare interface IconToggleButton extends Pick<IconButtonProps, 'icon' | 'ariaLabel'>, ToggleButtonsItem {
    readonly tooltip?: string;
    readonly tooltipPlacement?: TooltipPlacement;
}

export declare const IconToggleButtons: React_2.ForwardRefExoticComponent<IconToggleButtonsProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface IconToggleButtonsProps extends ToggleButtonsProps<IconToggleButton> {
}

export declare const InfoCard: {
    ({ caption, tooltip, text, details, ...props }: InfoCardProps): JSX_2.Element;
    displayName: string;
};

/**
 * Represents result returned from the load funnel configuration command.
 */
export declare interface InfoCardData {
    /**
     * Gets or sets card caption.
     */
    readonly caption: string;
    /**
     * Gets or sets card tooltip.
     */
    readonly tooltip: string;
    /**
     * Gets or sets the main text.
     */
    readonly text: string;
    /**
     * Gets or sets details to elaborate the main text.
     */
    readonly details: string;
}

/**
 * Info card properties.
 */
export declare interface InfoCardProps extends InfoCardData, UITestProps {
}

declare interface InjectedProps {
    readonly classes: string;
    readonly children: React.ReactNode;
}

export declare const injectIcons: (injectedIcons: React.FC<IconProps>[]) => void;

export declare const Inline: React_2.ForwardRefExoticComponent<InlineProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface InlineProps extends LayoutComponentProps, UITestProps {
    readonly spacing?: Spacing;
    readonly spacingX?: Spacing;
    readonly spacingY?: Spacing;
    readonly spacingXDirection?: InlineSpacingXDirection;
}

export declare enum InlineSpacingXDirection {
    Left = "Left",
    Right = "Right"
}

export declare const Input: React_2.ForwardRefExoticComponent<InputProps & React_2.RefAttributes<HTMLDivElement>>;

export declare const InputBase: React_2.ForwardRefExoticComponent<InputBaseProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface InputBaseProps extends NativeInputProps, UITestProps {
    /**
     * Specifies if input has valid value.
     */
    readonly invalid?: boolean;
    /**
     * Input value.
     */
    readonly value?: string | number;
    /**
     * Specifies input type.
     */
    readonly type?: 'text' | 'password' | 'email' | 'number';
    /**
     * Button or icon in input field.
     */
    readonly actionElement?: React.ReactNode;
    /**
     * Button for input clearing.
     */
    readonly clearButton?: React.ReactElement<HTMLButtonElement>;
    /**
     * Input ref.
     */
    readonly inputRef?: RefObject<HTMLInputElement>;
    /**
     * Specifies if input is used as Select component.
     */
    readonly isSelect?: boolean;
    /**
     * Tooltip text displayed on input.
     */
    readonly tooltipText?: string;
    /**
     * Dangerously sets explanation text as inner HTML.
     */
    readonly explanationTextAsHtml?: boolean;
    /**
     * Dangerously sets tooltip as inner HTML.
     */
    readonly tooltipAsHtml?: boolean;
}

export declare interface InputProps extends InputBaseProps {
    /**
     * Label used as description to input.
     */
    readonly label?: string;
    /**
     * Specifies if input is required.
     */
    readonly markAsRequired?: boolean;
    /**
     * Explanatory text in tooltip for disabled input.
     */
    readonly inactiveMessage?: string;
    /**
     * Icon in label.
     */
    readonly labelIcon?: IconName;
    /**
     * Text for icon in label.
     */
    readonly labelIconTooltip?: string;
    /**
     * Explanatory message for invalid input.
     */
    readonly validationMessage?: string;
    /**
     * Explanatory message for input.
     */
    readonly explanationText?: string;
    /**
     * Label actions element.
     */
    readonly labelActionsElement?: React.ReactNode;
}

declare type ItemId = string;

export declare const KXIcons: {
    'xp-a-lowercase': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-accordion': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-add-module': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-adjust': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-ai': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-android': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-apple': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-crooked-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-crooked-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-curved-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-curved-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-double-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-double-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-down-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-down-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-enter-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-leave-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-left-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-left-rect': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-right-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-right-rect': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-right-top-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-send': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-u-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-u-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-up-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-up-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrow-up': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrows-crooked': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrows-h': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrows-v': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-arrows': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-b': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-badge': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-ban-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bell': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bezier-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bin': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-binder': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-book-opened': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-box-cart': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-box-cogwheel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-box': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-boxes': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-braces-octothorpe': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-braces': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-bing': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-facebook': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-google-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-google': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-instagram': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-linkedin': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-mstranslator': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-open-id': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-pinterest': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-sharepoint': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-twitter': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brand-youtube': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-breadcrumb': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-briefcase': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-broom': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brush-slashed': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-brush': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubble-censored': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubble-check': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubble-hide': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubble-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubble-pencil': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubble-show': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubble-times': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubble-with-lines': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubble': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bubbles': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bucket-shovel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bug': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-building-block': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-building': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-bullseye': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-c-sharp': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-calendar-number': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-calendar': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-camera': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cancel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-caret-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-caret-left-aligned-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-caret-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-caret-right-aligned-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-caret-right-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-caret-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-caret-up': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-carousel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cb-check-disabled': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cb-check-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cb-check-minus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cb-check-preview': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cb-check-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cb-check': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cb-uncheck': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chain-broken': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chain-slash': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chain': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-check-circle-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-check-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-check': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-checklist': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-double-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-double-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-double-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-double-up': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-down-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-down-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-down-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-left-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-left-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-left-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-right-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-right-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-right-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-up-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-up-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-up-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chevron-up': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-choice-multi-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-choice-single-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-choice-user-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-chrome': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-circle-dashed': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-circle-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-circle-slashed': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-circle-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-clapperboard': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-clipboard-checklist': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-clipboard-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-clock': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cloud': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cogwheel-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cogwheel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cogwheels': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-collapse-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-collapse': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-compass': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-convert': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cookie': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-crop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-crosshair-f': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-crosshair-o': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-cup': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-custom-element': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-database': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-desktop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-dialog-window-cogwheel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-dialog-window': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-diamond': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc-arrows': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc-ban-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc-copy': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc-move': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc-paste': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc-torn': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc-user': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-doc': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-dollar-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-dots-vertical': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-down-dir': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-drawers': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-e-book': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-earth-micro': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-earth': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-edge': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-edit': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-ekg-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-ellipsis': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-engage-users': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-exclamation-triangle-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-exclamation-triangle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-expand': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-eye-slash': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-eye': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-f': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-factory': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-file-pdf': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-file': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-filter-1': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-firefox': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-flag': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-folder-belt': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-folder-clock': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-folder-cogwheel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-folder-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-folder-move': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-folder-opened': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-folder-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-folder': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-form': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-funnel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-gauge': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-gift': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-graduate-cap': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-graph': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-h-1': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-h-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-h-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-h-4': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-half-arrows-right-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-hat-moustache': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-headless-micro': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-headless': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-heart': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-heartshake': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-highlighter': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-home': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-i-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-i': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-id-card': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-id-cards': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-indent': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-integration-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-intercom': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-internet-explorer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-invoice': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-kentico': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-key': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-article-map': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-calendar-number-article': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-cols-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-cols-20-60-20': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-cols-20-80': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-cols-25-50-25': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-cols-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-cols-30-70': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-cols-4': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-cols-70-30': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-cols-80-20': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-forms-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-grid-2-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-grid-3-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-header-cols-2-footer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-header-cols-3-footer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-header-list-img': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-header-menu-text': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-header-text': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-img-2-cols-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-img-3-cols-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-lightbox': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-list-article-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-list-article': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-list-img-article': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-list-title': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-logotype-menu-col-footer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-logotype-menu-h-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-logotype-menu-v-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-menu-cols-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-menu-cols-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-menu-list-img-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-menu-list-img': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-menu-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-menu-text-col-bottom': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-menu-text-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-menu-text': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-rows-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-rows-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-rows-4': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-text-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-l-text': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-laptop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-layout': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-layouts': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-life-belt': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-light-bulb': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-lines-rectangle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-linux': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-list-bullets': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-list-numbers': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-lock-unlocked': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-lock': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-log-activity': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-loop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-magic-edit': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-magnifier-minus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-magnifier-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-magnifier': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-map-marker': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-map': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-market': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-mask': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-media-player': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-menu': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-merge': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-message-micro': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-message': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-messages': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-microphone': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-minus-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-minus-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-minus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-mobile': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-modal-close': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-modal-maximize': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-modal-minimize': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-modal-question': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-money-bill': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-monitor-broken': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-monitor-smartphone': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-monitor': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-mug': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-multi-channel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-newspaper': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-note': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-notebook': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-octothorpe': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-one': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-opera': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-organisational-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-outdent': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-palette': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-pants': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-paper-plane': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-paperclip': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-paragraph-center': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-paragraph-short': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-paragraph': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-parent-child-scheme-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-parent-child-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-parent-children-scheme-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-parent-children-scheme-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-pause': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-pc': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-pda': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-percent-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-perfume': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-permission-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-personalisation-variants': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-personalisation': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-picture': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-pictures': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-piechart-lines': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-piechart': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-pilcrow': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-pin-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-pin': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-placeholder': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-plus-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-plus-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-printer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-process-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-project-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-puzzle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-qr-code': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-question-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rb-check-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rb-check': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rb-uncheck': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-recaptcha': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rectangle-a-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rectangle-a': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rectangle-h': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rectangle-paragraph': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rectangle-v': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-resize': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-restriction-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-ribbon': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-right-double-quotation-mark': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rotate-double-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rotate-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rotate-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-rss': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-s': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-safari': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-scheme-circles-triangle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-scheme-connected-circles': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-scheme-path-circles-flipped': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-scheme-path-circles': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-scissors': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-separate': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-share-apple': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-share-google': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-shoe-women': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-shopping-cart': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-small-dot-centered': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-smartphone': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-software-package': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-spinner': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-square-dashed-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-square-dashed': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-staging-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-star-empty': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-star-full': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-star-semi': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-stop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-subscript': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-superscript': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-t-f': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-t-shirt': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-t-with-cross': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-t': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-tab-vertical': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-tab': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-table': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-tablet': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-tag': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-tags': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-three-dots-vertical': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-timed-box': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-times-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-times': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-translate': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-tree-structure': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-triangle-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-trophy': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-truck-moving': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-truck': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-two-rectangles-h': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-two-rectangles-stacked-times': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-two-rectangles-stacked': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-two-rectangles-v': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-two-squares-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-two-squares-with-lines': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-u': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-up-dir': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-user-checkbox': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-user-frame': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-user': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-users': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-vb': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-watch': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-windows': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-wizard-stick': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-x': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    'xp-xml-tag': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
};

export declare const KXIconSetNames: {
    readonly default: "xp-default-icon-set";
    readonly flags: "xp-flags-icon-set";
};

export declare const KXIconSets: {
    'xp-default-icon-set': {
        'xp-a-lowercase': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-accordion': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-add-module': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-adjust': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-ai': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-android': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-apple': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-crooked-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-crooked-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-curved-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-curved-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-double-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-double-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-down-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-down-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-enter-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-leave-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-left-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-left-rect': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-right-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-right-rect': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-right-top-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-send': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-u-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-u-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-up-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-up-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrow-up': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrows-crooked': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrows-h': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrows-v': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-arrows': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-b': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-badge': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-ban-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bell': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bezier-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bin': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-binder': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-book-opened': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-box-cart': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-box-cogwheel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-box': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-boxes': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-braces-octothorpe': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-braces': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-bing': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-facebook': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-google-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-google': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-instagram': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-linkedin': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-mstranslator': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-open-id': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-pinterest': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-sharepoint': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-twitter': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brand-youtube': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-breadcrumb': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-briefcase': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-broom': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brush-slashed': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-brush': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubble-censored': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubble-check': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubble-hide': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubble-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubble-pencil': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubble-show': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubble-times': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubble-with-lines': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubble': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bubbles': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bucket-shovel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bug': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-building-block': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-building': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-bullseye': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-c-sharp': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-calendar-number': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-calendar': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-camera': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cancel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-caret-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-caret-left-aligned-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-caret-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-caret-right-aligned-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-caret-right-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-caret-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-caret-up': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-carousel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cb-check-disabled': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cb-check-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cb-check-minus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cb-check-preview': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cb-check-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cb-check': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cb-uncheck': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chain-broken': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chain-slash': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chain': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-check-circle-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-check-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-check': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-checklist': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-double-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-double-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-double-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-double-up': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-down-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-down-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-down-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-down': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-left-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-left-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-left-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-right-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-right-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-right-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-up-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-up-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-up-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chevron-up': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-choice-multi-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-choice-single-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-choice-user-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-chrome': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-circle-dashed': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-circle-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-circle-slashed': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-circle-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-clapperboard': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-clipboard-checklist': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-clipboard-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-clock': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cloud': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cogwheel-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cogwheel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cogwheels': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-collapse-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-collapse': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-compass': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-convert': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cookie': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-crop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-crosshair-f': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-crosshair-o': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-cup': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-custom-element': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-database': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-desktop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-dialog-window-cogwheel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-dialog-window': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-diamond': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc-arrows': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc-ban-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc-copy': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc-move': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc-paste': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc-torn': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc-user': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-doc': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-dollar-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-dots-vertical': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-down-dir': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-drawers': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-e-book': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-earth-micro': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-earth': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-edge': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-edit': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-ekg-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-ellipsis': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-engage-users': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-exclamation-triangle-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-exclamation-triangle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-expand': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-eye-slash': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-eye': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-f': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-factory': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-file-pdf': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-file': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-filter-1': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-firefox': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-folder-belt': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-folder-clock': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-folder-cogwheel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-folder-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-folder-move': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-folder-opened': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-folder-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-folder': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-form': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-funnel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-gauge': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-gift': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-graduate-cap': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-graph': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-h-1': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-h-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-h-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-h-4': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-half-arrows-right-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-hat-moustache': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-headless-micro': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-headless': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-heart': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-heartshake': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-highlighter': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-home': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-i-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-i': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-id-card': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-id-cards': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-indent': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-integration-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-intercom': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-internet-explorer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-invoice': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-kentico': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-key': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-article-map': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-calendar-number-article': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-cols-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-cols-20-60-20': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-cols-20-80': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-cols-25-50-25': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-cols-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-cols-30-70': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-cols-4': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-cols-70-30': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-cols-80-20': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-forms-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-grid-2-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-grid-3-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-header-cols-2-footer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-header-cols-3-footer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-header-list-img': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-header-menu-text': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-header-text': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-img-2-cols-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-img-3-cols-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-lightbox': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-list-article-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-list-article': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-list-img-article': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-list-title': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-logotype-menu-col-footer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-logotype-menu-h-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-logotype-menu-v-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-menu-cols-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-menu-cols-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-menu-list-img-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-menu-list-img': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-menu-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-menu-text-col-bottom': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-menu-text-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-menu-text': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-rows-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-rows-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-rows-4': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-text-col': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-l-text': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-laptop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-layout': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-layouts': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-life-belt': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-light-bulb': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-lines-rectangle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-linux': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-list-bullets': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-list-numbers': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-lock-unlocked': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-lock': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-log-activity': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-loop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-magic-edit': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-magnifier-minus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-magnifier-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-magnifier': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-map-marker': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-map': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-market': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-mask': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-media-player': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-menu': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-merge': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-message-micro': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-message': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-messages': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-microphone': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-minus-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-minus-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-minus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-mobile': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-modal-close': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-modal-maximize': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-modal-minimize': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-modal-question': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-money-bill': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-monitor-broken': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-monitor-smartphone': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-monitor': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-mug': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-multi-channel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-newspaper': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-note': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-notebook': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-octothorpe': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-one': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-opera': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-organisational-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-outdent': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-palette': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-pants': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-paper-plane': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-paperclip': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-paragraph-center': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-paragraph-short': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-paragraph': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-parent-child-scheme-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-parent-child-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-parent-children-scheme-2': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-parent-children-scheme-3': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-pause': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-pc': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-pda': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-percent-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-perfume': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-permission-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-personalisation-variants': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-personalisation': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-picture': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-pictures': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-piechart-lines': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-piechart': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-pilcrow': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-pin-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-pin': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-placeholder': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-plus-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-plus-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-plus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-printer': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-process-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-project-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-puzzle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-qr-code': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-question-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rb-check-sign': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rb-check': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rb-uncheck': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-recaptcha': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rectangle-a-inverted': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rectangle-a': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rectangle-h': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rectangle-paragraph': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rectangle-v': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-resize': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-restriction-list': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-ribbon': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-right-double-quotation-mark': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rotate-double-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rotate-left': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rotate-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-rss': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-s': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-safari': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-scheme-circles-triangle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-scheme-connected-circles': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-scheme-path-circles-flipped': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-scheme-path-circles': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-scissors': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-separate': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-share-apple': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-share-google': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-shoe-women': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-shopping-cart': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-small-dot-centered': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-smartphone': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-software-package': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-spinner': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-square-dashed-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-square-dashed': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-square': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-staging-scheme': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-star-empty': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-star-full': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-star-semi': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-stop': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-subscript': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-superscript': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-t-f': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-t-shirt': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-t-with-cross': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-t': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-tab-vertical': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-tab': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-table': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-tablet': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-tag': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-tags': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-three-dots-vertical': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-timed-box': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-times-circle': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-times': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-translate': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-tree-structure': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-triangle-right': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-trophy': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-truck-moving': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-truck': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-two-rectangles-h': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-two-rectangles-stacked-times': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-two-rectangles-stacked': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-two-rectangles-v': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-two-squares-line': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-two-squares-with-lines': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-u': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-up-dir': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-user-checkbox': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-user-frame': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-user': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-users': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-vb': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-watch': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-windows': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-wizard-stick': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-x': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-xml-tag': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    };
    'xp-flags-icon-set': {
        'xp-flag-abkhazia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-afghanistan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-aland-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-albania': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-algeria': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-american-samoa': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-andorra': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-angola': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-anguilla': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-antigua-and-barbuda': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-argentina': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-armenia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-aruba': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-australia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-austria': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-azerbaijan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-azores-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bahamas': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bahrain': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-balearic-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bangladesh': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-barbados': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-basque-country': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-belarus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-belgium': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-belize': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-benin': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bermuda': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bhutan-1': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bhutan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bolivia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bonaire': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bosnia-and-herzegovina': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-botswana': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-brazil': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-british-columbia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-british-indian-ocean-territory': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-british-virgin-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-brunei': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-bulgaria': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-burkina-faso': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-burundi': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-cambodia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-cameroon': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-canada': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-canary-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-cape-verde': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-cayman-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-central-african-republic': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-ceuta': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-chad': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-chile': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-china': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-christmas-island': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-cocos-island': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-colombia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-comoros': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-cook-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-corsica': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-costa-rica': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-croatia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-cuba': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-curacao': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-cyprus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-czech-republic': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-democratic-republic-of-congo': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-denmark': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-djibouti': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-dominica': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-dominican-republic': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-east-timor': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-ecuador': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-egypt': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-el-salvador': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-england': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-equatorial-guinea': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-eritrea': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-estonia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-ethiopia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-european-union': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-falkland-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-faroe-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-fiji': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-finland': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-france': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-french-polynesia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-gabon': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-galapagos-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-gambia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-georgia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-germany': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-ghana': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-gibraltar': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-greece': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-greenland': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-grenada': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-guam': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-guatemala': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-guernsey': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-guinea-bissau': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-guinea': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-guyana': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-haiti': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-hawaii': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-honduras': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-hong-kong': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-hungary': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-iceland': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-india': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-indonesia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-iran': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-iraq': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-ireland': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-isle-of-man': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-israel': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-italy': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-ivory-coast': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-jamaica': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-japan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-jersey': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-jordan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-kazakhstan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-kenya': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-kiribati': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-kosovo': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-kuwait': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-kyrgyzstan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-laos': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-latvia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-lebanon': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-lesotho': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-liberia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-libya': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-liechtenstein': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-lithuania': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-luxembourg': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-macao': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-madagascar': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-madeira': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-malawi': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-malaysia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-maldives': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-mali': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-malta': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-marshall-island': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-martinique': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-mauritania': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-mauritius': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-melilla': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-mexico': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-micronesia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-moldova': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-monaco': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-mongolia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-montenegro': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-montserrat': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-morocco': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-mozambique': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-myanmar': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-namibia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-nato': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-nauru': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-nepal': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-netherlands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-new-zealand': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-nicaragua': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-niger': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-nigeria': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-niue': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-norfolk-island': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-north-korea': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-northern-cyprus': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-northern-marianas-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-norway': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-oman': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-orkney-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-ossetia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-pakistan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-palau': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-palestine': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-panama': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-papua-new-guinea': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-paraguay': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-peru': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-philippines': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-pitcairn-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-poland': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-portugal': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-puerto-rico': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-qatar': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-rapa-nui': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-republic-of-macedonia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-republic-of-the-congo': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-romania': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-russia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-rwanda': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-saba-island': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-sahrawi-arab-democratic-republic': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-saint-kitts-and-nevis': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-samoa': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-san-marino': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-sao-tome-and-prince': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-sardinia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-saudi-arabia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-scotland': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-senegal': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-serbia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-seychelles': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-sierra-leone': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-singapore': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-sint-eustatius': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-sint-maarten': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-slovakia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-slovenia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-solomon-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-somalia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-somaliland': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-south-africa': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-south-korea': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-south-sudan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-spain': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-sri-lanka': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-st-barts': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-st-lucia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-st-vincent-and-the-grenadines': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-sudan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-suriname': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-swaziland': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-sweden': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-switzerland': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-syria': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-taiwan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-tajikistan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-tanzania': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-thailand': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-tibet': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-togo': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-tokelau': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-tonga': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-transnistria': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-trinidad-and-tobago': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-tunisia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-turkey': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-turkmenistan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-turks-and-caicos': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-tuvalu': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-uganda': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-ukraine': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-united-arab-emirates': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-united-kingdom': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-united-nations': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-united-states': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-uruguay': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-uzbekistan': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-vanuatu': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-vatican-city': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-venezuela': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-vietnam': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-virgin-islands': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-wales': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-yemen': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-zambia': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
        'xp-flag-zimbabwe': ForwardRefExoticComponent<GeneratedIconProps & RefAttributes<SVGSVGElement>>;
    };
};

/**
 * Component for displaying label with tooltip visible when hovering over information icon.
 */
export declare const LabelWithTooltip: {
    ({ label, tooltipText, dataTestId }: LabelWithTooltipProps): JSX_2.Element;
    displayName: string;
};

/**
 * Represents properties for the LabelWithTooltip component.
 */
export declare interface LabelWithTooltipProps extends UITestProps {
    readonly label: string;
    readonly tooltipText: string;
}

export declare enum LayoutAlignment {
    Start = "flex-start",
    Center = "center",
    End = "flex-end"
}

export declare interface LayoutComponentProps {
    className?: string;
    children?: React.ReactNode;
}

export declare interface LeadingButtonProps extends UITestProps {
    readonly label: string;
    readonly icon: IconName;
    readonly disabled?: boolean;
    readonly destructive?: boolean;
    readonly tooltip?: string;
    readonly onClick?: (event: MouseEvent_2<HTMLElement> | KeyboardEvent_2<HTMLElement>) => void;
}

export declare type LeadingElementType = 'icon' | 'avatar' | 'checkbox' | 'quinaryButton' | 'empty';

/**
 * Component wrapping the HTML anchor element.
 */
export declare const Link: React_2.ForwardRefExoticComponent<LinkProps & React_2.RefAttributes<HTMLDivElement>>;

export declare const LinkButton: {
    ({ onClick, href, target, tabIndex, anchorRef, dataTestId, ...props }: LinkButtonProps): JSX_2.Element;
    displayName: string;
};

export declare interface LinkButtonProps extends AnchorButtonProps, Omit<BaseButtonProps, 'renderComponent'> {
    readonly anchorRef?: RefObject<HTMLAnchorElement>;
}

/**
 * Represents properties for the Link component.
 */
export declare interface LinkProps extends UITestProps {
    /**
     * The URI that the link points to.
     */
    readonly href: string;
    /**
     * Text to show in the link. If empty or null, the href is used instead.
     */
    readonly text?: string;
    /**
     * Target of the link.
     */
    readonly target?: '_self' | '_blank' | '_parent' | '_top';
    /**
     * Indicates whether the link is active. If `true`, text is used instead of anchor element.
     */
    readonly inactive?: boolean;
    /**
     * Indicates whether the link should be truncated with ellipsis.
     */
    readonly ellipsis?: boolean;
}

export declare const LinkTableCellComponent: ({ text, url }: LinkTableCellComponentProps) => JSX_2.Element;

export declare interface LinkTableCellComponentProps {
    /**
     * Text of the link.
     */
    readonly text: string;
    /**
     * URL of the link.
     */
    readonly url: string;
}

export declare enum MediaBreakpoints {
    SmMax = "1365.98px",
    MdMin = "1366px",
    MdMax = "1919.98px",
    LgMin = "1920px",
    DesktopMin = "600px",
    MobileMax = "599.98px"
}

declare interface MenuDropDownProps extends Omit<DropDownOnClickProps, 'offset'> {
}

export declare const MenuItem: React_2.ForwardRefExoticComponent<MenuItemProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface MenuItemProps extends UITestProps {
    readonly primaryLabel: string;
    readonly secondaryLabel?: string;
    readonly tooltipText?: string;
    readonly tooltipPlacement?: TooltipPlacement;
    readonly destructive?: boolean;
    readonly disabled?: boolean;
    readonly selected?: boolean;
    readonly isNested?: boolean;
    readonly noHoverCss?: boolean;
    readonly isMultiSelect?: boolean;
    readonly isSubmenuOpened?: boolean;
    readonly leadingElement?: {
        readonly type: LeadingElementType;
        readonly element: React_2.ReactNode;
    };
    readonly trailingElement?: {
        readonly type: TrailingElementType;
        readonly element: React_2.ReactNode;
    };
    readonly onClick?: (e: MouseEvent_2<HTMLElement> | KeyboardEvent_2<HTMLElement>) => void;
    readonly value?: string;
    readonly large?: boolean;
}

export declare const MenuItemWithSubmenu: {
    ({ submenuContent, onClick, ...restProps }: MenuItemWithSubmenuProps): JSX_2.Element;
    displayName: string;
};

export declare interface MenuItemWithSubmenuProps extends Omit<MenuItemProps, 'isSubmenuOpened' | 'trailingElement'> {
    readonly submenuContent: React_2.ReactNode;
}

export declare interface Message {
    readonly position?: SnackbarItemPosition;
    readonly duration?: number;
    readonly id?: string | number;
    readonly message: string;
    readonly onClose?: (id: string | number) => void;
    readonly variant: SnackbarItemVariant;
    readonly messageAsHtml?: boolean;
}

/**
 * Tree view component allowing to select multiple nodes.
 */
export declare const MultiselectTreeView: React_2.ForwardRefExoticComponent<MultiselectTreeViewProps & React_2.RefAttributes<HTMLUListElement>>;

export declare interface MultiselectTreeViewProps extends BaseTreeViewProps {
    /**
     * Identifiers of the selected nodes.
     */
    readonly selectedIdentifiers?: TreeNodeId[];
}

declare interface NameButtonProps extends Pick<ToggleButtonBaseProps, 'onClick' | 'ariaLabel' | 'isSelected'> {
    readonly label: string;
    readonly dataTestId?: string;
}

export declare interface NamedComponentCell extends TableCell {
    /**
     * Name of the component to display in the cell.
     */
    name: string;
    /**
     * Properties of the component.
     */
    componentProps: Record<string, any>;
}

export declare interface NameToggleButton extends Pick<NameButtonProps, 'label' | 'ariaLabel'>, ToggleButtonsItem {
}

export declare const NameToggleButtons: React_2.ForwardRefExoticComponent<NameToggleButtonsProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface NameToggleButtonsProps extends ToggleButtonsProps<NameToggleButton> {
}

declare type NativeInputProps = Pick<React.InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'disabled' | 'name' | 'onClick' | 'onKeyPress' | 'min' | 'max' | 'id' | 'placeholder' | 'tabIndex' | 'onBlur' | 'role' | 'autoComplete'>;

export declare const NotificationBarAlert: ForwardRefExoticComponent<NotificationBarAlertProps & RefAttributes<HTMLDivElement>>;

export declare interface NotificationBarAlertProps extends Pick<BaseNotificationBarProps, 'noAutoIncrease' | 'children' | 'childrenAsHtml' | 'dataTestId' | 'noBoldWeight'> {
    readonly onDismiss?: () => void;
}

export declare const NotificationBarInfo: ForwardRefExoticComponent<NotificationBarInfoProps & RefAttributes<HTMLDivElement>>;

export declare interface NotificationBarInfoProps extends Pick<BaseNotificationBarProps, 'noAutoIncrease' | 'children' | 'childrenAsHtml' | 'dataTestId' | 'noBoldWeight'> {
    readonly onDismiss?: () => void;
}

declare enum NotificationBarType {
    Alert = "alert",
    Warning = "warning",
    Info = "info"
}

export declare const NotificationBarWarning: ForwardRefExoticComponent<NotificationBarWarningProps & RefAttributes<HTMLDivElement>>;

export declare interface NotificationBarWarningProps extends Pick<BaseNotificationBarProps, 'noAutoIncrease' | 'children' | 'childrenAsHtml' | 'dataTestId' | 'noBoldWeight'> {
    readonly onDismiss?: () => void;
}

export declare const OptionalTooltip: {
    ({ customRenderText, text, tooltipText, children, ...restProps }: OptionalTooltipProps): JSX_2.Element;
    displayName: string;
};

/**
 * tooltipText is shown always. If truncation occurs, text is appended.
 */
export declare interface OptionalTooltipProps extends Omit<TooltipProps, 'shortcuts' | 'children'> {
    /**
     * tooltipText and text merge into tooltip when text gets truncated
     */
    readonly text: string;
    readonly customRenderText?: (refForTruncatedElement: RefObject<any>) => React_2.ReactElement;
    readonly children?: React_2.ReactNode | string;
}

export declare const OptionTile: React_2.ForwardRefExoticComponent<OptionTileProps & React_2.RefAttributes<HTMLButtonElement>>;

export declare interface OptionTileProps extends Pick<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick' | 'tabIndex'> {
    readonly label: string;
    readonly startIcon?: IconName;
    readonly endIcon?: IconName;
    readonly block?: boolean;
    readonly maxWidth?: string | number;
    readonly dataTestId?: string;
    readonly shouldExpand?: boolean;
}

/**
 * @deprecated Component is deprecated and will be removed in the next version.
 * Use SelectorItemInfoTableCellComponent instead.
 */
export declare const PageInfoTableCellComponent: ({ iconName, name, disabled }: PageInfoTableCellComponentProps) => JSX_2.Element;

export declare interface PageInfoTableCellComponentProps {
    readonly iconName?: IconName;
    readonly name: string;
    readonly disabled: boolean;
}

export declare const Pagination: React_2.ForwardRefExoticComponent<PaginationProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Properties of the Pagination component.
 */
export declare interface PaginationProps {
    /**
     * Represents a current page which is indicated visually.
     */
    readonly selectedPage: number;
    /**
     * Denotes the maximum number of pages.
     */
    readonly totalPages: number;
    /**
     * Allows you to bind a custom handler on a page change. The new page number is passed to the handler.
     */
    readonly onPageChange: (newPageNumber: number) => void;
}

export declare const Paper: React_2.ForwardRefExoticComponent<PaperProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Elevation for the paper.
 */
export declare enum PaperElevation {
    XS = "XS",
    S = "S",
    M = "M",
    L = "L"
}

/**
 * Paper component properties.
 */
export declare interface PaperProps extends DivBaseProps, UITestProps {
    /**
     * Elevation of the paper.
     */
    readonly elevation?: PaperElevation;
    /**
     * Indicates if the paper should fill full height of the parent.
     */
    readonly fullHeight?: boolean;
    /**
     * Indicates if the paper looks like infinite. Continues down above the screen edge.
     */
    readonly infinite?: boolean;
    /**
     * Border radius of the paper.
     */
    readonly borderRadius?: BorderRadius;
    /**
     * Additional CSS class.
     */
    readonly className?: string;
}

export declare interface PinProps {
    readonly active: boolean;
    readonly tooltip: string;
    readonly onClick: () => void;
}

export declare const ProgressBar: React_2.ForwardRefExoticComponent<ProgressBarProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ProgressBarProps {
    /**
     * Progress of progress bar: 0% - 100%
     */
    readonly completed?: number;
}

/**
 * @description
 * `RadioButton` is a component that represents a radio button and is used within
 * the `RadioGroup` component and cannot be used outside of it.
 */
export declare const RadioButton: React_2.ForwardRefExoticComponent<RadioButtonProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface RadioButtonProps {
    /**
     * The value used to identify radiobutton (required).
     */
    readonly value: string;
    /**
     * Test id data attribute.
     */
    readonly dataTestId?: string;
    /**
     * State indicating radiobutton availability.
     */
    readonly disabled?: boolean;
    /**
     * State indicating a radiobutton error.
     */
    readonly alert?: boolean;
    /**
     * Explanatory text for the radiobutton.
     */
    readonly caption?: string;
    /**
     * Explanatory text for the radiobutton with error.
     */
    readonly alertCaption?: string;
    /**
     * Label used as description to radiobutton.
     */
    readonly children: string;
    /**
     * Input ref.
     */
    readonly inputRef?: RefObject<HTMLInputElement>;
}

/**
 * @description
 * `RadioGroup` is a container for multiple radio buttons rendered via `RadioButton` components.
 */
export declare const RadioGroup: React_2.ForwardRefExoticComponent<RadioGroupProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface RadioGroupProps extends Omit<FormItemWrapperProps, 'id' | 'inline' | 'labelClassnames' | 'footerClassnames' | 'subheadlineClassnames' | 'readOnly'> {
    readonly name: string;
    readonly value?: string;
    readonly onChange?: (value: string) => void;
    readonly size?: RadioGroupSize;
    readonly inline?: boolean;
    readonly ariaLabel?: string;
}

export declare enum RadioGroupSize {
    Small = "small",
    Medium = "medium",
    Large = "large"
}

export declare const ResizableBox: React_2.ForwardRefExoticComponent<ResizableBoxProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ResizableBoxProps extends LayoutComponentProps, UITestProps {
    /**
     * Initial width of the box in pixels.
     */
    width?: number;
    /**
     * Initial height of the box in pixels.
     */
    height?: number;
    /**
     * Minimum width of the box in pixels.
     */
    minWidth?: number;
    /**
     * Minimum height of the box in pixels.
     */
    minHeight?: number;
    /**
     * Maximum width of the box in pixels.
     */
    maxWidth?: number;
    /**
     * Maximum height of the box in pixels.
     */
    maxHeight?: number;
    /**
     * Directions in which the box can be resized.
     */
    directions?: HandleDirection[];
    /**
     * Callback fired when the resize starts.
     */
    onResizeStart?: (event: ResizeEvent) => unknown;
    /**
     * Callback fired when the box is being resized.
     */
    onResize?: (event: ResizeEvent) => unknown;
    /**
     * Callback fired when the resize ends.
     */
    onResizeEnd?: (event: ResizeEvent) => unknown;
    /**
     * Style of the component.
     */
    style?: CSSProperties;
}

export declare type ResizeEvent = {
    size: {
        width: number;
        height: number;
    };
    direction: HandleDirection;
};

/**
 * Rich text editor component.
 */
export declare const RichTextEditor: React_2.ForwardRefExoticComponent<RichTextEditorProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Describes options and configuration of a custom plugin added to Rich text editor.
 */
export declare interface RichTextEditorPluginOptionsBase {
}

export declare interface RichTextEditorPluginProps {
    readonly componentName: string;
    /** Reference to RichTextEditor providing higher-scope functions (i.e. inserting link/image or executing a command). */
    readonly inputRef?: RefObject<RichTextEditorRef>;
    /** General low-level reference to Froala editor. */
    readonly froalaEditorRef?: MutableRefObject<any>;
    /** Configurator is used to access Froala configuration methods usually available in global JS scope and unavailable for a plugin in different JS module. */
    readonly froalaEditorConfigurator: FroalaEditorConfigurator;
    /** Options and configuration of RTE plugins. */
    readonly pluginOptions?: RichTextEditorPluginOptionsBase;
}

export declare interface RichTextEditorProps extends UITestProps {
    /**
     * HTML markup displayed in the editor.
     */
    readonly value?: string;
    /**
     * Callback to bind a custom handler on a text change.
     * @argument value changed value of HTML markup
     */
    readonly onChange?: (value?: string) => void;
    /**
     * Indicates if the rich text editor is disabled.
     */
    readonly disabled?: boolean;
    /**
     * Placeholder text.
     */
    readonly placeholder?: string;
    /**
     * Label.
     */
    readonly label?: string;
    /**
     * Validation message.
     */
    readonly validationMessage?: string;
    /**
     * Indicates if the editor is in invalid state.
     */
    readonly invalid?: boolean;
    /**
     * Identifier of element where scrollbar should be displayed.
     */
    readonly scrollableContainerId?: string;
    /**
     * Indicates if the user input is required.
     */
    readonly markAsRequired?: boolean;
    /**
     * Explanation text for RTE.
     */
    readonly explanationText?: string;
    /**
     * Tooltip text displayed when label is disabled.
     */
    readonly inactiveMessage?: string;
    /**
     * Label icon.
     */
    readonly labelIcon?: IconName;
    /**
     * Tooltip text for label icon.
     */
    readonly labelIconTooltip?: string;
    /**
     * Rich text editor ref.
     */
    readonly inputRef?: RefObject<RichTextEditorRef>;
    /**
     * Custom overriding configuration.
     */
    readonly customConfiguration?: object;
    /**
     * Html sanitizer configuration.
     */
    readonly htmlSanitizerConfiguration?: HTMLSanitizerConfig;
    /**
     * Height has higher priority than min-height.
     * If both are set then min-height will always be height.
     * Height, minHeight, maxHeight - for long text options.
     */
    readonly height?: number | string;
    readonly minHeight?: number | string;
    readonly maxHeight?: number | string;
    /**
     * Dangerously sets tooltip as inner HTML.
     */
    readonly tooltipAsHtml?: boolean;
    /**
     * Dangerously sets explanation as inner HTML.
     */
    readonly explanationTextAsHtml?: boolean;
    /**
     * Label actions element.
     */
    readonly labelActionsElement?: React.ReactNode;
}

/**
 * Ref to provide rich text editor's methods.
 */
export declare interface RichTextEditorRef {
    /**
     * Insert image into the text on current caret position (required).
     */
    readonly insertImage: (imageUrl: string, imageAttributes: {
        [key: string]: string;
    }) => void;
    /**
     * Replace image with a different one.
     */
    readonly replaceImage: (imageUrl: string, imageAttributes: {
        [key: string]: string;
    }, imageToReplace: any) => void;
    /**
     * Insert link into the text on current caret position (required).
     */
    readonly insertLink: (linkUrl: string, linkTitle: string, linkAttributes?: {
        [key: string]: string;
    }) => void;
    /**
     * Executes registered command by its name.
     */
    readonly executeCommand: (commandName: string) => void;
    /**
     * Insert html content into the text on current caret position (required).
     */
    readonly insertHtml?: (htmlContent: string) => void;
    /**
     * Ensure onChange event.
     */
    readonly ensureChange?: () => void;
    /**
     * Indicates if the rich text editor is disabled.
     */
    readonly isDisabled?: () => boolean;
}

export declare const Row: React_2.ForwardRefExoticComponent<RowProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface RowProps extends LayoutComponentProps {
    readonly alignX?: LayoutAlignment;
    readonly alignY?: LayoutAlignment;
    readonly spacing?: Spacing;
    readonly spacingX?: Spacing;
    readonly spacingY?: Spacing;
    readonly wrap?: RowWrap;
}

export declare enum RowWrap {
    NoWrap = "nowrap",
    Wrap = "wrap",
    WrapReverse = "wrap-reverse"
}

/**
 * Represents position of the horizontal scrollbar
 * NoScroll - table content fits into its container and has no horizontal scroll
 * Start/End - scrolled to the start/end of the table
 * Scroll - scrollbar offset is between the start and end position
 */
export declare enum ScrollState {
    NoScroll = "noScroll",
    Start = "start",
    Scroll = "scroll",
    End = "end"
}

export declare const Select: React_2.ForwardRefExoticComponent<SelectProps & React_2.RefAttributes<HTMLDivElement>>;

export declare const SelectGroupCell: React_2.ForwardRefExoticComponent<SelectGroupCellProps & React_2.RefAttributes<HTMLDivElement>>;

declare interface SelectGroupCellProps extends UITestProps {
    readonly open?: boolean;
    readonly label?: string;
    readonly tooltipText?: string;
    readonly icon?: IconName;
    readonly leadingElement?: {
        readonly type: LeadingElementType;
        readonly element: React.ReactNode;
    };
    readonly ellipsis?: boolean;
    readonly onClick?: MouseEventHandler<HTMLElement>;
    readonly selectionDisabled?: boolean;
    readonly labelRef?: React.RefObject<HTMLDivElement>;
    readonly className?: string;
}

export declare interface SelectGroupProps<SelectShape> {
    readonly selects: SelectShape[];
    readonly minWidth?: number;
    readonly paperClassName?: string;
    readonly renderSelect: (select: SelectShape, onItemClick: () => void, visible: boolean, index: number) => React.ReactNode;
}

export declare const SelectMenu: React_2.ForwardRefExoticComponent<SelectMenuProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface SelectMenuProps extends Omit<VerticalMenuProps, 'menuType'> {
}

export declare const SelectorItemInfoTableCellComponent: ({ iconName, name, disabled }: SelectorItemInfoTableCellComponentProps) => JSX_2.Element;

export declare interface SelectorItemInfoTableCellComponentProps {
    readonly iconName?: IconName;
    readonly name: string;
    readonly disabled: boolean;
}

export declare interface SelectProps extends Omit<InputProps, 'type' | 'actionElement' | 'onChange'>, Pick<DropDownActionMenuProps, 'maxContentHeight'> {
    readonly onChange: (value?: string) => void;
    readonly children: React.ReactNode;
    readonly clearable?: boolean;
    readonly clearButtonTooltip?: string;
}

declare interface SharedAvatarProps {
    /**
     * Avatar size.
     */
    readonly size: AvatarSize;
    /**
     * Text displayed on hover. It should contains whole name or e-mail.
     */
    readonly tooltipText: string;
    /**
     * Tooltip placement, defaults to Top.
     */
    readonly tooltipPlacement?: TooltipPlacement;
    /**
     * Initials of the user used if img is not provided or if img url fails.
     */
    readonly initials: string;
    /**
     * Url of the img which should be used instead of the initials.
     */
    readonly img?: string;
    /**
     * If true, the Avatar will cast a shadow.
     */
    readonly shadow?: boolean;
    /**
     * One of the gradient colors from GradientsDark.
     */
    readonly background: AvatarBackgroundType;
    /**
     * Custom React node to be rendered inside the Avatar.
     * This content takes precedence over the image.
     * Useful for rendering SVGs, icons, or other custom elements.
     */
    readonly customContent?: React.ReactNode;
}

export declare const Shelf: React_2.ForwardRefExoticComponent<ShelfProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ShelfProps {
    readonly children?: React.ReactNode;
    /**
     * Stick side has not rounded corners.
     */
    readonly sticky?: ShelfStickyPosition;
    /**
     * Add a box-shadow. Use it when rests on Paper.
     */
    readonly onPaper?: boolean;
    /**
     * Stretch the height to 100% of the parent.
     */
    readonly fullHeight?: boolean;
    /**
     * Class name passed to the element.
     */
    readonly className?: string;
}

export declare enum ShelfStickyPosition {
    Left = "Left",
    Right = "Right"
}

export declare const SideMenu: React_2.ForwardRefExoticComponent<SideMenuProps & React_2.RefAttributes<HTMLDivElement>>;

export declare enum SideMenuItemState {
    Default = "Default",
    Selected = "Selected",
    Disabled = "Disabled"
}

export declare const SideMenuItemTile: React_2.ForwardRefExoticComponent<SideMenuItemTileProps & React_2.RefAttributes<HTMLButtonElement>>;

export declare interface SideMenuItemTileProps extends UITestProps {
    readonly label: string;
    readonly iconName: IconName;
    readonly state?: SideMenuItemState;
    readonly onClick?: (e: React_2.MouseEvent<HTMLButtonElement>) => void;
}

export declare interface SideMenuProps extends UITestProps {
    readonly children: React_2.ReactNode;
}

export declare const SidePanel: React_2.ForwardRefExoticComponent<SidePanelProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Emitted when the side panel has been request to close
 */
export declare interface SidePanelCloseEvent {
    /**
     * Source of the closing event
     */
    readonly source: SidePanelCloseSource;
    /**
     * Event's target path.
     */
    readonly eventPath?: EventTarget[];
}

export declare enum SidePanelCloseSource {
    /**
     * Clicking on the close button.
     */
    UserClosed = "user_closed",
    /**
     * When the user clicks outside the {@link SidePanel}`s content.
     */
    ClickedOutside = "clicked_outside",
    /**
     * Foreign panel wants to be open, so it request all other panels to close.
     */
    ForeignPanelOpen = "foreign_panel_open",
    /**
     * The request for panel side opening has been blocked.
     */
    BlockedByForeignPanel = "blocked_by_foreign_panel",
    /**
     * Parent panel wants to close, so it requests all child panels to close.
     */
    ParentPanelClosed = "parent_panel_closed"
}

export declare interface SidePanelConfig {
    ref: RefObject<HTMLDivElement>;
    /**
     * Requests the panel to close. This usually happens if user wants to open new panel from outside of current panel.
     * @param event Information about what triggered the panel closing.
     * @returns If void is returned, it is assumed the panel closed right away. If promise is returned, then it will wait with.
     * @throws Throws if the closing has been blocked by to panel.
     * opening/closing of other panels until it is resolved. Rejecting the close will keep the panel open as is.
     * This is useful if you want add prompt asking if user wants to discard unsaved changes or not.
     */
    close: (event: SidePanelCloseEvent) => Promise<void> | void;
    /**
     * Called when panel becomes on top of panel stack.
     */
    onRevealed?: () => void;
    /**
     * Called when panel becomes overlaid by another panel.
     * @param isUserInteractable Specifies if user can interact with the panel even through, the panel is covered by another panel.
     */
    onCovered?: (isUserInteractable: boolean) => void;
    /**
     * Specifies if the panel will close when user click outside of the panel
     */
    isOutsideClickCloseable: boolean;
    /**
     * Width of the panel provided by the resize observer.
     */
    readonly panelWidth: number;
}

declare type SidePanelId = string & {
    __type: 'SidePanelId';
};

export declare const SidePanelManager: ({ children }: SidePanelManagerProps) => JSX_2.Element;

declare interface SidePanelManagerContextType {
    /**
     * Gets the current side panel id.
     */
    readonly getCurrentSidePanel: () => SidePanelId | undefined;
    /**
     * Adds the side panel under the sidePanelId.
     */
    readonly addSidePanel: (sidePanelId: SidePanelId, parentSidePanelId: SidePanelId | undefined, config: SidePanelConfig) => Promise<void>;
    /**
     * Removes the side panel from the provider.
     */
    readonly removeSidePanel: (sidePanelId: SidePanelId) => void;
    /**
     * Updates the side panel with the new config.
     * @param sidePanelId Side panel id.
     * @param config Side panel config.
     */
    readonly updateSidePanel: (sidePanelId: SidePanelId, config: SidePanelConfig) => void;
    /**
     * Gets the side panel offset of the sidePanelId.
     */
    readonly getSidePanelOffset: (sidePanelId: SidePanelId) => number;
    /**
     * Gets the current side panel ref.
     */
    readonly getCurrentSidePanelRef: () => RefObject<HTMLDivElement> | null;
    /**
     * Container holding all side panels.
     */
    readonly sidePanelContainer?: HTMLDivElement;
}

declare interface SidePanelManagerProps {
    readonly children: React_2.ReactNode;
}

export declare interface SidePanelProps extends UITestProps {
    /**
     * Headline of the SidePanel.
     */
    readonly headline: ReactNode;
    /**
     * Children of the SidePanel.
     */
    readonly children: React_2.ReactNode;
    /**
     * Footer of the SidePanel.
     */
    readonly footer?: React_2.ReactNode;
    /**
     * Notification bar.
     */
    readonly notificationBar?: React_2.ReactNode;
    /**
     * Indicates whether the cancel button should be automatically focused
     * when the SidePanel is presented to the user.
     */
    readonly autofocusCancelButton?: boolean;
    /**
     * SidePanel size.
     */
    readonly size: SidePanelSize;
    /**
     * Indicates the visibility of the SidePanel.
     */
    readonly isVisible: boolean;
    /**
     * Class name of the SidePanel.
     */
    readonly className?: string;
    /**
     * Called when the panel should close due to some action specified in {@link event}
     * @param event Specifying close information
     * @returns May return a promise if the closing is not instantaneous or closing can be rejected. This is useful if you want show prompt before side panel close.
     */
    readonly onClose: (event: SidePanelCloseEvent) => Promise<void> | void;
    /**
     * Can the side panel maximize and cover whole content? This will add minimize/maximize button to panels`s header.
     * By default false.
     */
    readonly isMaximizable?: boolean;
    /**
     * Indicated if the side-panel can be close by clicking outside.
     * By default true.
     */
    readonly isOutsideClickCloseable?: boolean;
    /**
     * Add tooltip text to header buttons.
     */
    readonly tooltips?: {
        /**
         * Close button tooltip.
         */
        readonly close?: string;
        /**
         * Minimize button tooltip.
         */
        readonly minimize?: string;
        /**
         * Maximize button tooltip.
         */
        readonly maximize?: string;
    };
    /**
     * Class name of the content holding inner component.
     */
    readonly contentClassName?: string;
    /**
     * Reference to the content wrapper.
     */
    readonly contentRef?: Ref<HTMLDivElement>;
}

export declare enum SidePanelSize {
    Full = "Full",
    Wrapped = "Wrapped",
    Stackable = "Stackable"
}

export declare enum SimpleStatusAlign {
    Left = "left",
    Right = "right"
}

export declare const SimpleStatusDefault: React_2.ForwardRefExoticComponent<SimpleStatusDefaultProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface SimpleStatusDefaultProps extends Omit<BaseSimpleStatusProps, 'type'> {
}

export declare const SimpleStatusError: React_2.ForwardRefExoticComponent<SimpleStatusErrorProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface SimpleStatusErrorProps extends Omit<BaseSimpleStatusProps, 'type' | 'content' | 'labelColor' | 'iconColor'> {
    readonly content: {
        readonly label: string;
        readonly iconAlign?: SimpleStatusAlign;
        readonly tooltipText?: string;
        readonly tooltipPlacement?: TooltipPlacement;
        readonly tooltipAppendTo?: Element;
    };
}

export declare enum SimpleStatusSize {
    S = "S",
    XS = "XS"
}

export declare const SimpleStatusSuccess: React_2.ForwardRefExoticComponent<SimpleStatusSuccessProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface SimpleStatusSuccessProps extends Omit<BaseSimpleStatusProps, 'type' | 'labelColor' | 'iconColor'> {
}

export declare const SimpleStatusTableCellComponent: ({ iconName, label, iconColor, iconAlign, labelColor, tooltipText }: SimpleStatusTableCellComponentProps) => JSX_2.Element;

export declare interface SimpleStatusTableCellComponentProps extends StatusComponentProps {
    readonly tooltipText?: string;
    readonly iconAlign?: SimpleStatusAlign;
}

declare enum SimpleStatusType {
    Default = "default",
    Error = "error",
    Success = "success",
    Warning = "warning"
}

export declare const SimpleStatusWarning: React_2.ForwardRefExoticComponent<SimpleStatusWarningProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface SimpleStatusWarningProps extends Omit<BaseSimpleStatusProps, 'type' | 'labelColor' | 'iconColor'> {
}

export declare const SkeletonBody: {
    ({ rowCount, columns, selectable }: SkeletonBodyProps): JSX_2.Element;
    displayName: string;
};

declare interface SkeletonBodyProps {
    readonly rowCount: number;
    readonly columns: TableColumn[];
    readonly selectable?: boolean;
}

declare interface SnackbarContextType {
    readonly messages: Message[];
    readonly addMessage: (message: Message) => void;
    readonly removeMessage: (id: string | number) => void;
    readonly clearMessages: () => void;
}

export declare enum SnackbarItemPosition {
    TopLeft = "top-left",
    Top = "top",
    TopRight = "top-right",
    BottomLeft = "bottom-left",
    Bottom = "bottom",
    BottomRight = "bottom-right"
}

export declare enum SnackbarItemVariant {
    Success = "success",
    Error = "error",
    Warning = "warning",
    Info = "info"
}

export declare const SnackbarProvider: ({ children, position, verticalSpacing, horizontalSpacing }: SnackbarProviderProps) => JSX_2.Element;

declare interface SnackbarProviderProps {
    readonly children: React.ReactNode;
    readonly position?: SnackbarItemPosition;
    readonly verticalSpacing?: SnackbarSpacing;
    readonly horizontalSpacing?: SnackbarSpacing;
}

export declare enum SnackbarSpacing {
    M = "M",
    L = "L",
    XL = "XL"
}

export declare interface SortModel {
    /**
     * Column name to sort by.
     */
    sortBy: string;
    /**
     * Type of the sorting (ascending/descending).
     */
    sortType: SortType;
}

export declare enum SortType {
    Asc = "asc",
    Desc = "desc"
}

export declare enum Spacing {
    Micro = "1px",
    XS = "4px",
    S = "8px",
    M = "12px",
    L = "16px",
    XL = "24px",
    XXL = "32px",
    XXXL = "40px",
    XXXXL = "48px"
}

export declare const Spinner: {
    ({ className, ...props }: SpinnerProps): JSX_2.Element;
    displayName: string;
};

export declare interface SpinnerProps extends Omit<IconProps, 'name'> {
    className?: string;
}

export declare const SplitButton: {
    ({ size, color, disabled, disabledState, inProgress, icon, open, onToggle, children, href, target, onClick, title, ...props }: SplitButtonProps): JSX_2.Element;
    displayName: string;
};

export declare enum SplitButtonDisabledState {
    NONE = "NONE",
    ALL = "ALL",
    PARTIAL = "PARTIAL"
}

export declare interface SplitButtonProps extends Omit<BaseButtonProps, 'renderComponent' | 'trailingIcon' | 'active' | 'badge' | 'fillContainer' | 'destructive' | 'borderless' | 'className'> {
    readonly color: ButtonColor.Primary | ButtonColor.Secondary;
    readonly onToggle?: (isOpen: boolean) => void;
    readonly size: ButtonSize.S | ButtonSize.M | ButtonSize.L;
    readonly open?: boolean;
    readonly href?: string;
    readonly target?: HTMLAttributeAnchorTarget;
    readonly onClick?: (e: MouseEvent_2<HTMLElement>) => void;
    readonly children: React.ReactNode;
    readonly title?: string;
    /**
     * @deprecated Property is deprecated and will be removed in the next version. Use disabledState instead.
     */
    readonly disabled?: boolean;
    readonly disabledState?: SplitButtonDisabledState;
}

export declare const Stack: React_2.ForwardRefExoticComponent<StackProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface StackProps extends LayoutComponentProps {
    readonly align?: LayoutAlignment;
    readonly spacing?: Spacing;
    readonly fullHeight?: boolean;
}

declare interface StandardTreeNodeProps extends BaseTreeNodeProps {
    /**
     * Function to render main part of the node. Components rendered with this function are wrapped by element ensuring proper background color when node is selected, hovered or disabled.
     * @param isNodeSelected Indicates if node is currently selected.
     */
    readonly renderNode: (isNodeSelected: boolean) => React.ReactNode;
}

/**
 * Represents properties of the basic status component (colored text with icon).
 */
export declare interface StatusComponentProps {
    /**
     * Name of the icon.
     */
    readonly iconName: IconName;
    /**
     * Text of the status label.
     */
    readonly label: string;
    /**
     * Color of the icon.
     */
    readonly iconColor: keyof typeof Colors;
    /**
     * Color of the label.
     */
    readonly labelColor: keyof typeof Colors;
}

export declare const StickyHeader: ({ children, className }: StickyHeaderProps) => JSX_2.Element;

export declare interface StickyHeaderProps {
    /**
     * Children elements.
     */
    readonly children: React_2.ReactNode;
    /**
     * CSS class name of the sticky header.
     */
    readonly className?: string;
}

export declare interface StringCell extends TableCell {
    /**
     * Value of the cell.
     */
    value: string;
    /**
     * Tooltip of the cell. If not set, the tooltip is same as the value.
     */
    tooltipText?: string;
}

export declare const StringTableCellComponent: ({ value, tooltipText }: StringTableCellComponentProps) => JSX_2.Element;

export declare interface StringTableCellComponentProps {
    readonly value: string;
    readonly tooltipText?: string;
}

export declare const SubheaderDivider: React_2.ForwardRefExoticComponent<SubheaderDividerProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface SubheaderDividerProps {
    readonly text: string;
}

/**
 * Component for displaying Switch.
 */
export declare const Switch: React_2.ForwardRefExoticComponent<SwitchProps & React_2.RefAttributes<HTMLDivElement>>;

/**
 * Switch on/off state indicator
 */
export declare interface SwitchProps extends UITestProps {
    /**
     * Switch on/off state (required).
     */
    readonly value: boolean;
    /**
     * Switch size (required).
     */
    readonly size: SwitchSize;
    /**
     * Label for description of switch.
     */
    readonly label?: string;
    /**
     * Indicate disabled switch.
     */
    readonly disabled?: boolean;
    /**
     * Used to assign a label to the correct switch (screen reader users)
     */
    readonly switchId?: string;
    /**
     * Used when action triggered by turning switch on/off takes some time.
     */
    readonly inProgress?: boolean;
    /**
     * Allows consumer to switch the switch (required).
     */
    readonly onChange: (value: boolean) => void;
    /**
     * Label actions element.
     */
    readonly labelActionsElement?: React.ReactNode;
}

/**
 * Switch size type.
 */
export declare enum SwitchSize {
    M = "M",
    L = "L"
}

export declare enum SystemTheme {
    Light = "light",
    Dark = "dark"
}

export declare const Table: React_2.ForwardRefExoticComponent<TableProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface TableAction {
    /**
     * Identifier of the action.
     */
    readonly identifier?: string;
    /**
     * Label of the action.
     */
    label: string;
    /**
     * Tooltip of the action button.
     */
    title?: string;
    /**
     * Icon of the action.
     */
    icon: IconName;
    /**
     * Indicates if the action is disabled.
     */
    disabled: boolean;
    /**
     * Indicates if the action is destructive.
     */
    destructive: boolean;
}

export declare interface TableCell {
    /**
     * Type of the cell.
     */
    type: CellType;
    /**
     * @deprecated Disabled state is deprecated and will be removed in the next version.
     */
    disabled?: boolean;
    /**
     * The name of the column the cell belongs to.
     */
    columnName?: string;
}

export declare interface TableColumn {
    /**
     * Name of the column.
     */
    name: string;
    /**
     * Caption of the column.
     */
    caption: string;
    /**
     * Indicates if the column is visible.
     */
    visible: boolean;
    /**
     * Minimun width of the column.
     */
    minWidth: number;
    /**
     * Maximum width of the column.
     */
    maxWidth: number;
    /**
     * Content type of the columns.
     */
    contentType: ColumnContentType;
    /**
     * Indicates if the columns is sortable.
     */
    sortable: boolean;
    /**
     * Indicates if the column is searchable via search input.
     */
    searchable: boolean;
}

export declare const TableHeader: React_2.ForwardRefExoticComponent<TableHeaderProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface TableHeaderProps extends UITestProps {
    readonly style?: React.CSSProperties;
    readonly className?: string;
    readonly columns: TableColumn[];
    readonly selectable?: boolean;
    readonly selection?: HeaderSelection;
    readonly sortModel?: SortModel;
    readonly selectLabel?: string;
    readonly onSortChange?: (sort: SortModel) => void;
    readonly onSelectAll?: (selected: boolean) => void;
}

export declare interface TableProps extends UITestProps {
    /**
     * Columns of the table.
     */
    readonly columns: TableColumn[];
    /**
     * Rows of the table.
     */
    readonly rows: TableRow[] | undefined;
    /**
     * Indicates if the table should have selectable rows.
     */
    readonly selectable?: boolean;
    /**
     * Indicates if the table should have selectable all rows at once.
     */
    readonly isAllRowsSelectable?: boolean;
    /**
     * Sort model of the table.
     */
    readonly sortModel?: SortModel;
    /**
     * Label for select row checkbox.
     */
    readonly selectRowLabel?: string;
    /**
     * Label for the select all rows checkbox.
     */
    readonly selectAllRowsLabel?: string;
    /**
     * Indicates if the header of the table should be visible.
     */
    readonly isHeaderVisible?: boolean;
    /**
     * Maximum number of visible actions in a table row.
     */
    readonly maxVisibleRowActions?: number;
    /**
     * Identifiers of the rows that should be preselected in the table.
     * Defaults to empty array.
     */
    readonly preselectedRows?: unknown[];
    /**
     * Header class name.
     */
    readonly headerClassName?: string;
    /**
     * Function to render table pre-header.
     */
    readonly renderPreheader?: () => ReactNode;
    /**
     * Function to render table footer.
     */
    readonly renderFooter?: () => ReactNode;
    /**
     * Handler that is called when selection of the rows changes.
     * @param selectedItems Identifiers of selected rows.
     */
    readonly onSelectedItemsChange?: (selectedItems: unknown[]) => void;
    /**
     * Handler that fires when the sort is changed.
     * @param sortModel Sort model.
     */
    readonly onSortChange?: (sortModel: SortModel) => void;
    /**
     * Handler that fires when the row is clicked.
     * @param identifier Identifier of the clicked row.
     */
    readonly onRowClick?: (identifier: unknown) => void;
    /**
     * Handler that fires when the table view changes.
     * @param x horizontal scroll position
     * @param y vertical scroll position
     */
    readonly onViewChange?: (viewChangeEvent: ViewChangeEvent) => void;
    /**
     * Indicates if the row selection should be toggled when the row is clicked on and table is in selectable mode (property {@link TableProps.selectable} is set to true).
     * Callback {@link TableProps.onRowClick} is invoked if defined.
     */
    readonly toggleSelectionOnRowClick?: boolean;
}

export declare interface TableRow {
    /**
     * Identifier of the row.
     */
    identifier: any;
    /**
     * Table row cells.
     */
    cells: TableCell[];
    /**
     * Indicates if the row is disabled.
     */
    disabled: boolean;
    /**
     * Indicates whether the row is in an invalid state.
     */
    isInvalid?: boolean;
    /**
     * The message to show when if the row is inactive.
     */
    inactiveMessage?: string;
}

export declare const TableRowComponent: {
    ({ cells, columns, disabled, selectable, selected, skeleton, selectLabel, maxVisibleRowActions, inactiveMessage, dataTestId, onRowSelect: onSelect, onRowClick, isInvalid, dragElement, gridLayout }: TableRowProps): JSX_2.Element;
    displayName: string;
};

/**
 * Elevation for the table row.
 * @deprecated Table row uses border instead of shadow.
 */
export declare enum TableRowElevation {
    XS = "XS",
    S = "S",
    M = "M",
    L = "L"
}

/**
 * Represents properties of the TableRow component.
 */
export declare interface TableRowProps extends UITestProps {
    /**
     * List of cells displayed in a table row.
     */
    readonly cells: TableCell[];
    /**
     * List of table columns.
     */
    readonly columns: TableColumn[];
    /**
     * Indicates if the row is disabled.
     */
    readonly disabled: boolean;
    /**
     * Indicates if the row is selectable. Defaults to 'False'.
     */
    readonly selectable?: boolean;
    /**
     * Indicates if the row is selected. Defaults to 'False'.
     */
    readonly selected?: boolean;
    /**
     * Indicates if the row skeleton is displayed. Defaults to 'False'.
     */
    readonly skeleton?: boolean;
    /**
     * Tooltip message displayed on disabled selectable row checkbox.
     */
    readonly selectLabel?: string;
    /**
     * Number of visible row actions.
     */
    readonly maxVisibleRowActions?: number;
    /**
     * Tooltip message displayed on disabled row.
     */
    readonly inactiveMessage?: string;
    /**
     * Elevation of the table row.
     * @deprecated Table row uses border instead of shadow.
     */
    readonly elevation?: TableRowElevation;
    /**
     * Callback when selectable row is selected.
     */
    readonly onRowSelect?: (selected: boolean) => void;
    /**
     * Callback when row is clicked on.
     */
    readonly onRowClick?: () => void;
    /**
     * Indicates whether the row is in an invalid state. Defaults to 'False'.
     */
    readonly isInvalid?: boolean;
    /**
     * Drag element for the table row.
     */
    readonly dragElement?: JSX.Element;
    /**
     * Indicates whether the row should use grid layout.
     */
    readonly gridLayout?: boolean;
}

export declare const Tag: React_2.ForwardRefExoticComponent<TagProps & React_2.RefAttributes<HTMLDivElement>>;

export declare type TagBackgroundType = {
    readonly color: Colors;
};

declare enum TagMode {
    Light = "light",
    Dark = "dark"
}

export declare interface TagProps {
    readonly label: string;
    readonly tooltipText?: string;
    readonly tooltipTextAsHtml?: boolean;
    readonly onClick?: () => void;
    readonly onRemoveClick?: () => void;
    readonly onRemoveMouseDown?: () => void;
    readonly disabled?: boolean;
    readonly removable?: boolean;
    readonly background?: TagBackgroundType;
    readonly fullWidth?: boolean;
    readonly isDragging?: boolean;
    readonly leadingButton?: React_2.ReactElement<HTMLButtonElement>;
    readonly mode?: TagMode;
    readonly dataTestId?: string;
    readonly dataTestIdTagButton?: string;
    readonly dataTestIdRemoveButton?: string;
}

export declare const TagTableCellComponent: ({ color, label, tooltipText }: TagTableCellComponentProps) => JSX_2.Element;

export declare interface TagTableCellComponentProps {
    readonly label: string;
    readonly color: keyof typeof Colors;
    readonly tooltipText?: string;
}

export declare enum TestIds {
    Chevron = "chevron",
    ConfirmAction = "confirm-action",
    DeleteFolderActionButton = "deletefolder-action",
    EnableFolderActionButton = "enablecontentdelivery-action",
    DisplayName = "DisplayName",
    FolderDisplayName = "FolderDisplayName",
    NewSmartFolderPlusButton = "new-smart-folder-plus-button",
    RenameFolderActionButton = "renamefolder-action",
    RenameSmartFolderDialog = "rename-smart-folder-dialog",
    CloneSmartFolderDialog = "clone-smart-folder-dialog",
    SidePanel = "side-panel",
    SidePanelCloseButton = "side-panel-close",
    SmartFolderFilterForm = "smart-folder-form",
    SmartFolderLabel = "smart-folder-label",
    SubmitButton = "submit-button",
    TreeItemMenuButton = "tree-item-menu-button",
    Button = "button",
    DeleteButton = "button-Delete",
    SaveSmartFolderDialog = "save-smart-folder-dialog",
    UserNameInputField = "userName",
    Submit = "submit",
    CreateButton = "button-create",
    ButtonCreate = "Create",
    ChannelDisplayName = "ChannelDisplayName",
    ChannelType = "ChannelType",
    MenuItem = "menu-item",
    ChannelSize = "ChannelSize",
    PrimaryLanguage = "primary-language",
    ContentLanguage = "content-language",
    WebsiteChannelDomain = "WebsiteChannelDomain",
    EnglishLanguage = "english",
    ActionTileButton = "action-tile",
    PasswordInputField = "password",
    ChannelNameCell = "table-cell-ChannelDisplayName",
    TableRow = "table-row",
    AvatarButton = "AvatarButton",
    EnabledForDeliveryIcon = "xp-truck-moving",
    Callout = "callout",
    BreadcrumbHome = "breadcrumb-home",
    BreadcrumbApplication = "breadcrumb-application",
    EditForm = "edit-form",
    ConfirmationForm = "confirmation-form",
    ItemTile = "item-tile",
    TemplateLoaderErrorPane = "templateLoaderErrorPane",
    GoToDashboardButton = "button-goToDashboard",
    Snackbar = "snackbar",
    SendingDomain = "EmailChannelSendingDomain",
    EmailServiceDomain = "EmailChannelServiceDomain",
    CodeName = "code-name",
    ContentTypeType = "ClassContentTypeType",
    ClassDisplayName = "ClassDisplayName",
    Namespace = "code-name-namespace",
    Name = "Name",
    RequiredCheckbox = "RequiredCheckbox",
    FieldCaption = "FieldCaption",
    FormComponent = "FormComponent",
    DataType = "DataType",
    Dialog = "dialog",
    CancelAction = "cancel-action",
    CloseCross = "xp-cancel",
    GenerateEmailContentButton = "generate-email-content-button",
    GenerateEmailSubjectBasedOnEmailContentButton = "generate-email-subject-based-on-email-content-button",
    RichTextEditorRefinementsButton = "rich-text-editor-refinements-button",
    EmailContentFieldsSelector = "email-content-fields",
    BarItem = "bar-item",
    Size = "Size",
    DraggableButton = "draggable-button",
    EmailContentFieldsChevron = "email-content-fields-dropdown-indicator",
    BindingSidePanelButton = "button-open-binding-sidepanel",
    SideNavigationVerticalMenu = "side-navigation-vertical-menu",
    EmailTemplateDisplayName = "EmailTemplateDisplayName",
    EmailTemplateSelector = "EmailTemplate",
    ContinueButton = "content-item-action-button-continue",
    CreateEmailPage = "create-email-page",
    ContentItemActionButtonCreate = "content-item-action-button-create",
    ContentItemActionButtonSave = "content-item-action-button-save",
    EmailPreviewText = "EmailPreviewText",
    EmailBody = "Body",
    ArrowSend = "xp-arrow-send",
    RefinementHeader = "refinement-header",
    RteRefinementSuggestionsList = "rte-refinement-suggestions-list",
    SubjectSuggestionsList = "email-subject-suggestions-list",
    BodySuggestionsList = "email-body-suggestions-list",
    EmailSubject = "EmailSubject",
    ProvideAdditionalParametersCheckbox = "ProvideAdditionalParametersCheckbox",
    GenerateWebsiteChannelCheckbox = "GenerateWebsiteChannelCheckbox",
    TopicAndMainMessage = "TopicAndMainMessage",
    CallToActionDescription = "CallToActionDescription",
    TargetAudience = "TargetAudience",
    WebUrls = "WebUrls",
    CustomDescription = "CustomDescription",
    MagicEdit = "xp-magic-edit",
    EditPage = "edit-page",
    ContentSource = "Source",
    MaximumNumberOfWords = "MaximumNumberOfWords",
    SnackbarMessage = "snackbar-item-message",
    AutomationNodeStatisticsCount = "statistics-count",
    AutomationNode = "automation-node",
    WorkspaceSelectorDropdownGroup = "WorkspaceSelectionDropdown",
    WorkspaceSelectorDropdownActionMenu = "WorkspaceSelectorDropdownActionMenu",
    VerticalTab = "vertical-tab",
    EnableDisableProcessButton = "enable-disable-process-button",
    TypeField = "type",
    SourceField = "Source",
    EventCodeField = "EventCode",
    UserNameField = "user-name",
    DateFromField = "EventTime-date-from",
    DateToField = "data-testid=\"EventTime-date-to",
    FilterPanelButton = "filter-button",
    CancelButton = "cancel-button",
    FilterForm = "filter-form",
    ClearAllButton = "clear-all-button",
    SubmitFormButton = "submit-form-button",
    RecalculateAutomationsStatisticsButton = "recalculate-automations-statistics-button",
    WorkspaceDisplayName = "WorkspaceDisplayName",
    RoleDisplayName = "RoleDisplayName",
    RoleDescription = "RoleDescription",
    ApplicationItemSelector = "application-item-selector",
    PermissionItemSelector = "permission-item-selector",
    WorkspaceItemSelector = "workspace-item-selector",
    SelectApplication = "select-application",
    XpChevronUp = "xp-chevron-up",
    PermissionSet = "permission-set",
    AiraIcon = "xp-ai",
    AiraButton = "AiraButton"
}

export declare const TextArea: React_2.ForwardRefExoticComponent<TextAreaProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface TextAreaProps extends Pick<React_2.TextareaHTMLAttributes<HTMLTextAreaElement>, 'onChange' | 'disabled' | 'name' | 'onClick' | 'onKeyPress' | 'id' | 'placeholder' | 'maxLength'>, UITestProps {
    readonly label?: string;
    readonly readOnly?: boolean;
    readonly validationMessage?: string;
    readonly invalid?: boolean;
    readonly value?: string;
    readonly minRows?: number;
    readonly maxRows?: number;
    readonly explanationText?: string;
    readonly inactiveMessage?: string;
    readonly labelIcon?: IconName;
    readonly labelIconTooltip?: string;
    readonly markAsRequired?: boolean;
    readonly textAreaRef?: RefObject<HTMLTextAreaElement>;
    readonly renderActions?: () => React_2.ReactNode;
    /**
     * Dangerously sets explanation text as inner HTML.
     */
    readonly explanationTextAsHtml?: boolean;
    /**
     * Dangerously tooltip as inner HTML.
     */
    readonly tooltipAsHtml?: boolean;
    /**
     * Label actions element.
     */
    readonly labelActionsElement?: React_2.ReactNode;
}

export declare const TextWithLabel: React_2.ForwardRefExoticComponent<TextWithLabelProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface TextWithLabelProps extends UITestProps {
    /**
     *  Label used as header to the text.
     */
    readonly label?: string;
    /**
     * Value used as text to the label.
     */
    readonly value?: string;
    /**
     * Dangerously sets component value as inner HTML.
     */
    readonly valueAsHtml?: boolean;
}

export declare const ThemeContext: React_2.Context<ThemeContextType>;

declare interface ThemeContextType {
    readonly theme: string;
    readonly setTheme: (theme: string) => void;
    readonly injectTheme: (themes: ThemesObjectType) => void;
}

export declare interface ThemeProps {
    readonly children: React.ReactNode;
    readonly customThemes?: ThemesObjectType;
    readonly defaultTheme?: string;
}

export declare const ThemeProvider: {
    ({ children, customThemes, defaultTheme }: ThemeProps): JSX_2.Element;
    displayName: string;
};

declare interface ThemesObjectType {
    [key: string]: string;
}

export declare interface TimePicker {
    /**
     * Format of the time 24-h or 12-h.
     */
    readonly timeFormat: DateTimePickerTimeFormat;
    /**
     * Label for the action button.
     */
    readonly actionLabel: string;
    /**
     * Default time shown when the user writes an invalid date.
     */
    readonly defaultTime: DateTimePickerTimeValue;
    /**
     * Callback called on the action button click.
     */
    readonly onActionClick?: () => void;
}

export declare const TippyContext: React_2.Context<TippyContextType>;

/**
 * Tippy context values.
 */
export declare type TippyContextType = {
    containerId: string | undefined;
};

export declare const TippyProvider: ({ children, containerId }: TippyProviderProps) => JSX_2.Element;

/**
 * Tippy context provider properties.
 */
export declare interface TippyProviderProps {
    readonly containerId?: string;
    readonly children: React.ReactNode;
}

declare interface ToggleButtonBaseProps {
    readonly onClick: () => void;
    readonly ariaLabel?: string;
    readonly children: React.ReactNode;
    readonly className?: string;
    readonly isSelected: boolean;
    readonly type: ToggleButtonBaseTypes;
    readonly dataTestId?: string;
}

declare enum ToggleButtonBaseTypes {
    Icon = "icon",
    Name = "Name"
}

declare interface ToggleButtonsItem {
    readonly id: ItemId;
}

declare interface ToggleButtonsProps<ItemsType> {
    readonly selectedItemId: ItemId;
    readonly items: ItemsType[];
    readonly onChange: (id: ItemId) => void;
    readonly orientation?: 'vertical' | 'horizontal';
}

export declare const Tooltip: {
    ({ children, tooltipText, placement, shortcuts, maxGridUnitWidth, withoutShowDelay, visible, disabled, appendTo, tooltipTextAsHtml, ...props }: TooltipProps): JSX_2.Element;
    displayName: string;
};

export declare const tooltipConfig: {
    containerId: string;
};

export declare enum TooltipPlacement {
    Bottom = "bottom",
    Top = "top",
    Left = "left",
    Right = "right",
    BottomStart = "bottom-start",
    BottomEnd = "bottom-end",
    TopStart = "top-start",
    TopEnd = "top-end",
    LeftStart = "left-start",
    LeftEnd = "left-end",
    RightStart = "right-start",
    RightEnd = "right-end"
}

export declare interface TooltipProps {
    readonly children: React_2.ReactElement<HTMLElement>;
    readonly tooltipText?: string;
    readonly placement?: TooltipPlacement;
    readonly shortcuts?: string;
    readonly maxGridUnitWidth?: number;
    readonly withoutShowDelay?: boolean;
    readonly visible?: boolean;
    readonly disabled?: boolean;
    readonly appendTo?: Element;
    /**
     * Dangerously sets tooltip text as inner HTML.
     */
    readonly tooltipTextAsHtml?: boolean;
}

declare type TrailingElementType = 'icon' | 'label';

/**
 * Tree node component.
 */
export declare const TreeNode: React_2.ForwardRefExoticComponent<TreeNodeProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface TreeNodeAction {
    /**
     * Action name.
     */
    readonly name: string;
    /**
     * Label of the action.
     */
    readonly label: string;
    /**
     * Indicates if the action is disabled. Defaults to `false`.
     */
    readonly disabled?: boolean;
    readonly actionExecutor?: (action: TreeNodeAction) => void;
    /**
     * Actions tooltip.
     */
    readonly tooltip?: string;
    /**
     * Indicates if the action is destructive. Defaults to `false`.
     */
    readonly isDestructive?: boolean;
    /**
     * Action icon.
     */
    readonly icon?: IconName;
}

declare interface TreeNodeContentSharedProps extends UITestProps {
    /**
     * Indicates if current node is selected. Defaults to `false`.
     */
    readonly isSelected?: boolean;
    /**
     * Indicates if current node is disabled. Defaults to `false`.
     */
    readonly disabled?: boolean;
}

/**
 * Tree node properties related to drag & drop feature.
 */
export declare interface TreeNodeDnDProps {
    /**
     * Dragged element reference.
     */
    dragSource?: ConnectDragSource;
    /**
     * Dragged element preview reference.
     */
    dragPreview?: ConnectDragPreview;
    /**
     * Dropzone above target element.
     */
    moveAboveTarget?: ConnectDropTarget;
    /**
     * Dropzone below target element.
     */
    moveBelowTarget?: ConnectDropTarget;
    /**
     * Dropzone over target element empty cell.
     */
    moveOverEmptyCellTarget?: ConnectDropTarget;
    /**
     * Dropzone over expand element.
     */
    moveOverExpandTarget?: ConnectDropTarget;
    /**
     * Indicates if item is being dragged over top dropzone.
     */
    isOverTop?: boolean;
    /**
     * Indicates if item is being dragged over bottom dropzone.
     */
    isOverBottom?: boolean;
    /**
     * Indicates if item is being dragged over empty cell dropzone.
     */
    isOverEmptyCell?: boolean;
    /**
     * Indicates if item is being dragged.
     */
    isDragging?: boolean;
    /**
     * Name of the dragged node.
     */
    draggedNodeName?: string;
}

/**
 * Identifier of the tree node.
 */
export declare type TreeNodeId = string | number;

/**
 * Tree node leading icon component.
 */
export declare const TreeNodeLeadingIcon: React_2.ForwardRefExoticComponent<TreeNodeLeadingIconProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface TreeNodeLeadingIconProps extends TreeNodeContentSharedProps, UITestProps {
    /**
     * Indicates if icon is draggable. Defaults to `false`.
     */
    readonly draggable?: boolean;
    /**
     * Children component.
     */
    readonly children: React.ReactNode;
}

/**
 * Component representing a tree node menu with actions.
 */
export declare const TreeNodeMenu: {
    <TActions extends TreeNodeAction>({ disabled, isOpen, actions, onToggle, actionExecutor, menuButtonTooltip }: TreeNodeMenuProps<TActions>): JSX_2.Element;
    displayName: string;
};

/**
 * Tree node menu action component.
 */
export declare const TreeNodeMenuAction: React_2.ForwardRefExoticComponent<TreeNodeMenuActionProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface TreeNodeMenuActionProps extends UITestProps {
    /**
     * Label of the action.
     */
    readonly label: string;
    /**
     * Indicates if the action is disabled. Defaults to `false`.
     */
    readonly disabled?: boolean;
    /**
     * Event fired on action click.
     */
    readonly onClick?: () => void;
    /**
     * Tooltip of the action.
     */
    readonly tooltip?: string;
    /**
     * Indicates if the action is destructive. Defaults to `false`.
     */
    readonly isDestructive?: boolean;
    /**
     * Action icon.
     */
    readonly icon?: IconName;
}

/**
 * Tree node menu actions component.
 */
export declare const TreeNodeMenuActions: {
    ({ title, disabled, isOpen, dataTestIdMenu, dataTestIdMenuButton, onToggle, children }: TreeNodeMenuActionsProps): JSX_2.Element;
    displayName: string;
};

export declare interface TreeNodeMenuActionsProps {
    /**
     * Title of the actions button.
     */
    readonly title: string;
    /**
     * Indicates if the actions button is disabled. Defaults to `false`.
     */
    readonly disabled?: boolean;
    /**
     * Indicates if the menu is opened. Defaults to `false`.
     */
    readonly isOpen: boolean;
    /**
     * Event fired when menu is toggled.
     * @param isOpen Indicates if the menu is opened.
     */
    readonly onToggle?: (isOpen: boolean) => void;
    /**
     * Children component.
     */
    readonly children: React.ReactNode;
    /**
     * Test-id attribute of the menu.
     */
    readonly dataTestIdMenu?: string;
    /**
     * Test-id attribute of the menus button.
     */
    readonly dataTestIdMenuButton?: string;
}

export declare interface TreeNodeMenuProps<TActionType extends TreeNodeAction> {
    /**
     * Indicates if the actions menu is disabled. Defaults to `false`.
     */
    readonly disabled?: boolean;
    /**
     * Indicates if the menu is opened. Defaults to `false`.
     */
    readonly isOpen: boolean;
    /**
     * Collection of the node actions.
     */
    readonly actions: TActionType[];
    /**
     * Event fired when menu is toggled.
     * @param isOpen Indicates if the menu is opened.
     */
    readonly onToggle?: (isOpen: boolean) => void;
    /**
     * Event handler fired when action of certain type is executed.
     * @param action Action that was executed.
     */
    readonly actionExecutor: (action: TActionType) => void;
    /**
     * Reference to the first action in the actions list.
     */
    readonly firstActionRef?: React.RefObject<HTMLDivElement>;
    /**
     * Tooltip of the button which opens the menu.
     */
    readonly menuButtonTooltip: string;
}

export declare type TreeNodeProps<TIsDraggable = boolean> = TIsDraggable extends true ? {
    /** Indicates if node is draggable. */
    isDraggable: TIsDraggable;
} & DraggableTreeNodeProps : {
    /** Indicates if node is draggable. */
    isDraggable: TIsDraggable;
} & StandardTreeNodeProps;

/**
 * Tree node title component.
 */
export declare const TreeNodeTitle: ({ isSelected, disabled, children, dataTestId, tooltipText, ...props }: TreeNodeTitleProps) => JSX_2.Element;

export declare interface TreeNodeTitleProps extends TreeNodeContentSharedProps {
    /**
     * Tree node title string.
     */
    readonly children: string;
    /**
     * Text of the tooltip.
     */
    readonly tooltipText?: string;
    /**
     * Part of title text that should be highlighted.
     */
    readonly textToHighlight?: string;
}

/**
 * Tree node trailing icon component.
 */
export declare const TreeNodeTrailingIcon: React_2.ForwardRefExoticComponent<TreeNodeTrailingIconProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface TreeNodeTrailingIconProps extends UITestProps {
    /**
     * Children component.
     */
    readonly children: React.ReactNode;
    /**
     * Indicates if icon is disabled. Defaults to `false`.
     */
    readonly disabled?: boolean;
}

/**
 * Tree view component.
 */
export declare const TreeView: React_2.ForwardRefExoticComponent<TreeViewProps & React_2.RefAttributes<HTMLUListElement>>;

export declare const TreeViewContext: React_2.Context<TreeViewContextType>;

declare type TreeViewContextType = {
    isSelected: (id: TreeNodeId) => boolean;
    anyNodeIsDragging: boolean;
    setAnyNodeIsDragging: (isDragging: boolean) => void;
};

export declare interface TreeViewProps extends BaseTreeViewProps {
    /**
     * Identifier of the selected node.
     */
    readonly selectedIdentifier?: TreeNodeId;
}

export declare interface UITestProps {
    /**
     * Test id data attribute.
     */
    readonly dataTestId?: string;
}

/**
 * Upload tile component.
 */
export declare const UploadTile: React_2.ForwardRefExoticComponent<UploadTileProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface UploadTileProps {
    /**
     * Event handler fired when file is being uploaded.
     * @param files list of uploaded files.
     */
    readonly onUpload: (files: FileList) => void;
    /**
     * Text displayed in the first line of the label.
     */
    readonly firstLineLabel: string;
    /**
     * Text displayed in the second line of the label.
     */
    readonly secondLineLabel: string;
    /**
     * Text displayed in button label.
     */
    readonly buttonLabel: string;
    /**
     * Indicates if the upload tile is disabled. Defaults to `false`.
     */
    readonly disabled?: boolean;
    /**
     * The tooltip message displayed when the upload tile is disabled.
     */
    readonly inactiveMessage?: string;
    /**
     * Size of the upload tile.
     */
    readonly size: UploadTileSize;
    /**
     * File types which tile should accept
     */
    readonly acceptFiles?: string;
}

/**
 * Indicates the size of the upload tile
 */
export declare enum UploadTileSize {
    Full = "Full",
    Compact = "Compact"
}

export declare const useHandleClickOutside: (ref: React.RefObject<HTMLElement>, onClickOutside: (event: Event) => void) => void;

export declare const useMediaBreakpoints: () => {
    mobile: boolean;
    sm: boolean;
    md: boolean;
    lg: boolean;
};

/**
 * Detects whether virtual keyboard is visible on touch device. Uses resize handler with minHeight change.
 * @param minKeyboardHeight Min height of keyboard to detect resize change.
 * @returns keyboardVisible sign.
 */
export declare const useMobileKeyboard: (minKeyboardHeight?: number) => boolean;

export declare const useScrollDown: (throttleInterval?: number) => boolean;

export declare const useSidePanel: () => SidePanelManagerContextType;

export declare const useSnackbar: () => SnackbarContextType;

export declare const useTheme: () => ThemeContextType;

export declare const useTippy: () => HTMLElement | "parent";

/**
 * Handles focus in the tree navigation.
 */
export declare const useTreeNavigationFocus: ({ onFocus, onBlur, isNavigationOpened }: UseTreeNavigationFocusProps) => {
    initNavigationFocus: (actions: TreeNodeAction[], currentlyFocusedElement: HTMLElement) => void;
    navigationButtonElement: HTMLElement | undefined;
};

declare interface UseTreeNavigationFocusProps {
    /**
     * Function that is called when the navigation gains focus.
     */
    readonly onFocus: () => void;
    /**
     * Function that is called when the navigation looses focus.
     */
    readonly onBlur: () => void;
    /**
     * Indicates if the navigation is opened and focus is handled in this hook.
     */
    readonly isNavigationOpened: boolean;
}

export declare const useWindowDimensions: () => {
    width: number;
    height: number;
};

declare interface VerticalMenuProps {
    readonly pinnedItem?: () => React.ReactNode;
    readonly menuType?: VerticalMenuType;
    readonly children: React.ReactNode;
    readonly maxContentHeight?: string;
}

declare enum VerticalMenuType {
    ActionMenu = "action-menu",
    SelectMenu = "select-menu",
    SelectGroupMenu = "select-group-menu"
}

export declare const VerticalTab: React_2.ForwardRefExoticComponent<VerticalTabProps & React_2.RefAttributes<HTMLButtonElement>>;

/**
 * Props for the VerticalTab component.
 *
 * @extends UITestProps
 */
export declare interface VerticalTabProps extends UITestProps {
    readonly primaryText: string;
    readonly secondaryText?: string;
    readonly disabled?: boolean;
    readonly selected?: boolean;
    readonly leadingElement?: React_2.ReactNode;
    readonly trailingElement?: React_2.ReactNode;
    readonly onClick?: (e: MouseEvent_2<HTMLElement> | KeyboardEvent_2<HTMLElement>) => void;
}

export declare interface ViewChangeEvent {
    /**
     * Horizontal scroll position.
     */
    scrollX: number;
    /**
     * Vertical scroll position.
     */
    scrollY: number;
    /**
     * Width of the table.
     */
    width: number;
    /**
     * Height of the table.
     */
    height: number;
    scrollWidth: number;
    scrollHeight: number;
    /**
     * Width of the table content (i.e. scrollable rows).
     */
    contentWidth: number;
    /**
     * Height of the table content (i.e. scrollable rows).
     */
    contentHeight: number;
}

export declare const ViewMenu: React_2.ForwardRefExoticComponent<ViewMenuProps & React_2.RefAttributes<HTMLDivElement>>;

export declare interface ViewMenuProps extends Omit<ShelfProps, 'fullHeight'> {
}

declare const Window_2: ForwardRefExoticComponent<WindowProps & RefAttributes<WindowFunctions>>;
export { Window_2 as Window }

/**
 * Functions which you can call through {@link Window} reference.
 */
export declare interface WindowFunctions {
    /**
     * @returns Bounding rect of the window
     */
    readonly boundingRect: () => DOMRect;
    /**
     * Set window position
     * @param x X position in pixels from left edge of document
     * @param y Y position in pixels from top edge of document
     */
    readonly setPosition: (x: number, y: number) => void;
    /**
     * Set size of the Window
     * @param width Width in px
     * @param height Height in px
     */
    readonly setSize: (width: number, height: number) => void;
}

export declare const WindowManager: (props: WindowManagerProps) => JSX_2.Element;

declare interface WindowManagerProps {
    /**
     * Any component which may use {@link WindowPortal}
     */
    readonly children: ReactNode;
}

/**
 * Places the window within a dedicate place in the DOM document, close to the document`s root. You should wrap every window/modal/panel with this.
 * @param props {@link WindowPortalProps}
 */
export declare const WindowPortal: (props: WindowPortalProps) => ReactPortal | null;

declare interface WindowPortalProps {
    /**
     * Whole content of Window, including headers/footers/everything
     */
    readonly children: ReactNode;
}

declare interface WindowProps extends UITestProps {
    /**
     * Headline element. Close/Maximize/Minimize buttons will stay.
     */
    readonly headline: ReactNode;
    /**
     * Window footer
     */
    readonly footer: ReactNode;
    /**
     * Content of the window
     */
    readonly children: ReactNode;
    /**
     * Called when user request to close the window
     */
    readonly onClose?: () => void;
    /**
     * Called when window stage changes, usually after some user interaction
     * @param stege Current window stage
     */
    readonly onStageChange?: (stege: WindowStage) => void;
    /**
     * Can the window can be resized with mouse
     */
    readonly resizable?: boolean;
    /**
     * Can the window can be dragged with mouse
     */
    readonly draggable?: boolean;
    /**
     * Can the window be minimized
     */
    readonly minimizable?: boolean;
    /**
     * Can the window be maximized
     */
    readonly maximizable?: boolean;
    /**
     * Initial window position during first render
     */
    readonly initialPosition?: {
        x: number;
        y: number;
    };
    /**
     * Initial window size during first render
     */
    readonly initialSize?: {
        width: number;
        height: number;
    };
    /**
     * Should ESC key press close the window
     */
    readonly closeOnEsc?: boolean;
    /**
     * Tooltip string for window buttons
     */
    readonly tooltips?: {
        close: string;
        maximize: string;
        minimize: string;
        normalize: string;
    };
}

/**
 * List of window stages
 */
export declare enum WindowStage {
    Maximized = 1,
    Minimized = 2,
    Normal = 3
}

export declare enum Zindex {
    Hidden = "-1",
    Visible = "0",
    Elevated = "1",
    Rte = "10",
    RtePopup = "20",
    StickyHeader = "100",
    DropDown = "200",
    Statusbar = "1000",
    Sidepanel = "3000",
    SidepanelDialog = "3500",
    AppMenu = "4000",
    Dialog = "2000",
    Snackbar = "6000",
    Tooltip = "5000",
    Prompt = "10000"
}

export { }
